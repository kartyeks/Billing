//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5472
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace AltioStarHR.Reports.Payroll {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Payroll")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class Payroll : global::System.Data.DataSet {
        
        private SalaryRegisterDataTable tableSalaryRegister;
        
        private PaySlipDataTable tablePaySlip;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Payroll() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected Payroll(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SalaryRegister"] != null)) {
                    base.Tables.Add(new SalaryRegisterDataTable(ds.Tables["SalaryRegister"]));
                }
                if ((ds.Tables["PaySlip"] != null)) {
                    base.Tables.Add(new PaySlipDataTable(ds.Tables["PaySlip"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SalaryRegisterDataTable SalaryRegister {
            get {
                return this.tableSalaryRegister;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaySlipDataTable PaySlip {
            get {
                return this.tablePaySlip;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Payroll cln = ((Payroll)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SalaryRegister"] != null)) {
                    base.Tables.Add(new SalaryRegisterDataTable(ds.Tables["SalaryRegister"]));
                }
                if ((ds.Tables["PaySlip"] != null)) {
                    base.Tables.Add(new PaySlipDataTable(ds.Tables["PaySlip"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSalaryRegister = ((SalaryRegisterDataTable)(base.Tables["SalaryRegister"]));
            if ((initTable == true)) {
                if ((this.tableSalaryRegister != null)) {
                    this.tableSalaryRegister.InitVars();
                }
            }
            this.tablePaySlip = ((PaySlipDataTable)(base.Tables["PaySlip"]));
            if ((initTable == true)) {
                if ((this.tablePaySlip != null)) {
                    this.tablePaySlip.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Payroll";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/Payroll.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSalaryRegister = new SalaryRegisterDataTable();
            base.Tables.Add(this.tableSalaryRegister);
            this.tablePaySlip = new PaySlipDataTable();
            base.Tables.Add(this.tablePaySlip);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSalaryRegister() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePaySlip() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Payroll ds = new Payroll();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SalaryRegisterRowChangeEventHandler(object sender, SalaryRegisterRowChangeEvent e);
        
        public delegate void PaySlipRowChangeEventHandler(object sender, PaySlipRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SalaryRegisterDataTable : global::System.Data.TypedTableBase<SalaryRegisterRow> {
            
            private global::System.Data.DataColumn columnEmpCode;
            
            private global::System.Data.DataColumn columnEmpName;
            
            private global::System.Data.DataColumn columnFatherName;
            
            private global::System.Data.DataColumn columnESOP;
            
            private global::System.Data.DataColumn columnDOJ;
            
            private global::System.Data.DataColumn columnDOB;
            
            private global::System.Data.DataColumn columnDesignation;
            
            private global::System.Data.DataColumn columnCTC;
            
            private global::System.Data.DataColumn columnBasic;
            
            private global::System.Data.DataColumn columnHRA;
            
            private global::System.Data.DataColumn columnSPL;
            
            private global::System.Data.DataColumn columnCON;
            
            private global::System.Data.DataColumn columnLTA;
            
            private global::System.Data.DataColumn columnMED;
            
            private global::System.Data.DataColumn columnPF;
            
            private global::System.Data.DataColumn columnGrossSalary;
            
            private global::System.Data.DataColumn columnNetSalary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalaryRegisterDataTable() {
                this.TableName = "SalaryRegister";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SalaryRegisterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SalaryRegisterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpCodeColumn {
                get {
                    return this.columnEmpCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpNameColumn {
                get {
                    return this.columnEmpName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FatherNameColumn {
                get {
                    return this.columnFatherName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ESOPColumn {
                get {
                    return this.columnESOP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOJColumn {
                get {
                    return this.columnDOJ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOBColumn {
                get {
                    return this.columnDOB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DesignationColumn {
                get {
                    return this.columnDesignation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CTCColumn {
                get {
                    return this.columnCTC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BasicColumn {
                get {
                    return this.columnBasic;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HRAColumn {
                get {
                    return this.columnHRA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SPLColumn {
                get {
                    return this.columnSPL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONColumn {
                get {
                    return this.columnCON;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LTAColumn {
                get {
                    return this.columnLTA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MEDColumn {
                get {
                    return this.columnMED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PFColumn {
                get {
                    return this.columnPF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossSalaryColumn {
                get {
                    return this.columnGrossSalary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NetSalaryColumn {
                get {
                    return this.columnNetSalary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalaryRegisterRow this[int index] {
                get {
                    return ((SalaryRegisterRow)(this.Rows[index]));
                }
            }
            
            public event SalaryRegisterRowChangeEventHandler SalaryRegisterRowChanging;
            
            public event SalaryRegisterRowChangeEventHandler SalaryRegisterRowChanged;
            
            public event SalaryRegisterRowChangeEventHandler SalaryRegisterRowDeleting;
            
            public event SalaryRegisterRowChangeEventHandler SalaryRegisterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSalaryRegisterRow(SalaryRegisterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalaryRegisterRow AddSalaryRegisterRow(
                        string EmpCode, 
                        string EmpName, 
                        string FatherName, 
                        string ESOP, 
                        string DOJ, 
                        string DOB, 
                        string Designation, 
                        string CTC, 
                        string Basic, 
                        string HRA, 
                        string SPL, 
                        string CON, 
                        string LTA, 
                        string MED, 
                        string PF, 
                        string GrossSalary, 
                        string NetSalary) {
                SalaryRegisterRow rowSalaryRegisterRow = ((SalaryRegisterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmpCode,
                        EmpName,
                        FatherName,
                        ESOP,
                        DOJ,
                        DOB,
                        Designation,
                        CTC,
                        Basic,
                        HRA,
                        SPL,
                        CON,
                        LTA,
                        MED,
                        PF,
                        GrossSalary,
                        NetSalary};
                rowSalaryRegisterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSalaryRegisterRow);
                return rowSalaryRegisterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SalaryRegisterDataTable cln = ((SalaryRegisterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SalaryRegisterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmpCode = base.Columns["EmpCode"];
                this.columnEmpName = base.Columns["EmpName"];
                this.columnFatherName = base.Columns["FatherName"];
                this.columnESOP = base.Columns["ESOP"];
                this.columnDOJ = base.Columns["DOJ"];
                this.columnDOB = base.Columns["DOB"];
                this.columnDesignation = base.Columns["Designation"];
                this.columnCTC = base.Columns["CTC"];
                this.columnBasic = base.Columns["Basic"];
                this.columnHRA = base.Columns["HRA"];
                this.columnSPL = base.Columns["SPL"];
                this.columnCON = base.Columns["CON"];
                this.columnLTA = base.Columns["LTA"];
                this.columnMED = base.Columns["MED"];
                this.columnPF = base.Columns["PF"];
                this.columnGrossSalary = base.Columns["GrossSalary"];
                this.columnNetSalary = base.Columns["NetSalary"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmpCode = new global::System.Data.DataColumn("EmpCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpCode);
                this.columnEmpName = new global::System.Data.DataColumn("EmpName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpName);
                this.columnFatherName = new global::System.Data.DataColumn("FatherName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFatherName);
                this.columnESOP = new global::System.Data.DataColumn("ESOP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnESOP);
                this.columnDOJ = new global::System.Data.DataColumn("DOJ", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOJ);
                this.columnDOB = new global::System.Data.DataColumn("DOB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOB);
                this.columnDesignation = new global::System.Data.DataColumn("Designation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesignation);
                this.columnCTC = new global::System.Data.DataColumn("CTC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCTC);
                this.columnBasic = new global::System.Data.DataColumn("Basic", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBasic);
                this.columnHRA = new global::System.Data.DataColumn("HRA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHRA);
                this.columnSPL = new global::System.Data.DataColumn("SPL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSPL);
                this.columnCON = new global::System.Data.DataColumn("CON", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCON);
                this.columnLTA = new global::System.Data.DataColumn("LTA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLTA);
                this.columnMED = new global::System.Data.DataColumn("MED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMED);
                this.columnPF = new global::System.Data.DataColumn("PF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPF);
                this.columnGrossSalary = new global::System.Data.DataColumn("GrossSalary", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossSalary);
                this.columnNetSalary = new global::System.Data.DataColumn("NetSalary", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNetSalary);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalaryRegisterRow NewSalaryRegisterRow() {
                return ((SalaryRegisterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SalaryRegisterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SalaryRegisterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SalaryRegisterRowChanged != null)) {
                    this.SalaryRegisterRowChanged(this, new SalaryRegisterRowChangeEvent(((SalaryRegisterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SalaryRegisterRowChanging != null)) {
                    this.SalaryRegisterRowChanging(this, new SalaryRegisterRowChangeEvent(((SalaryRegisterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SalaryRegisterRowDeleted != null)) {
                    this.SalaryRegisterRowDeleted(this, new SalaryRegisterRowChangeEvent(((SalaryRegisterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SalaryRegisterRowDeleting != null)) {
                    this.SalaryRegisterRowDeleting(this, new SalaryRegisterRowChangeEvent(((SalaryRegisterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSalaryRegisterRow(SalaryRegisterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Payroll ds = new Payroll();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SalaryRegisterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PaySlipDataTable : global::System.Data.TypedTableBase<PaySlipRow> {
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlipDataTable() {
                this.TableName = "PaySlip";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaySlipDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PaySlipDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlipRow this[int index] {
                get {
                    return ((PaySlipRow)(this.Rows[index]));
                }
            }
            
            public event PaySlipRowChangeEventHandler PaySlipRowChanging;
            
            public event PaySlipRowChangeEventHandler PaySlipRowChanged;
            
            public event PaySlipRowChangeEventHandler PaySlipRowDeleting;
            
            public event PaySlipRowChangeEventHandler PaySlipRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPaySlipRow(PaySlipRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlipRow AddPaySlipRow() {
                PaySlipRow rowPaySlipRow = ((PaySlipRow)(this.NewRow()));
                object[] columnValuesArray = new object[0];
                rowPaySlipRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPaySlipRow);
                return rowPaySlipRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PaySlipDataTable cln = ((PaySlipDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PaySlipDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlipRow NewPaySlipRow() {
                return ((PaySlipRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PaySlipRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PaySlipRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PaySlipRowChanged != null)) {
                    this.PaySlipRowChanged(this, new PaySlipRowChangeEvent(((PaySlipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PaySlipRowChanging != null)) {
                    this.PaySlipRowChanging(this, new PaySlipRowChangeEvent(((PaySlipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PaySlipRowDeleted != null)) {
                    this.PaySlipRowDeleted(this, new PaySlipRowChangeEvent(((PaySlipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PaySlipRowDeleting != null)) {
                    this.PaySlipRowDeleting(this, new PaySlipRowChangeEvent(((PaySlipRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePaySlipRow(PaySlipRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Payroll ds = new Payroll();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PaySlipDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SalaryRegisterRow : global::System.Data.DataRow {
            
            private SalaryRegisterDataTable tableSalaryRegister;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SalaryRegisterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSalaryRegister = ((SalaryRegisterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpCode {
                get {
                    try {
                        return ((string)(this[this.tableSalaryRegister.EmpCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpCode\' in table \'SalaryRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalaryRegister.EmpCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpName {
                get {
                    try {
                        return ((string)(this[this.tableSalaryRegister.EmpNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpName\' in table \'SalaryRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalaryRegister.EmpNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FatherName {
                get {
                    try {
                        return ((string)(this[this.tableSalaryRegister.FatherNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FatherName\' in table \'SalaryRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalaryRegister.FatherNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ESOP {
                get {
                    try {
                        return ((string)(this[this.tableSalaryRegister.ESOPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ESOP\' in table \'SalaryRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalaryRegister.ESOPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOJ {
                get {
                    try {
                        return ((string)(this[this.tableSalaryRegister.DOJColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOJ\' in table \'SalaryRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalaryRegister.DOJColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOB {
                get {
                    try {
                        return ((string)(this[this.tableSalaryRegister.DOBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOB\' in table \'SalaryRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalaryRegister.DOBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Designation {
                get {
                    try {
                        return ((string)(this[this.tableSalaryRegister.DesignationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Designation\' in table \'SalaryRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalaryRegister.DesignationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CTC {
                get {
                    try {
                        return ((string)(this[this.tableSalaryRegister.CTCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CTC\' in table \'SalaryRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalaryRegister.CTCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Basic {
                get {
                    try {
                        return ((string)(this[this.tableSalaryRegister.BasicColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Basic\' in table \'SalaryRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalaryRegister.BasicColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HRA {
                get {
                    try {
                        return ((string)(this[this.tableSalaryRegister.HRAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HRA\' in table \'SalaryRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalaryRegister.HRAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SPL {
                get {
                    try {
                        return ((string)(this[this.tableSalaryRegister.SPLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SPL\' in table \'SalaryRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalaryRegister.SPLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CON {
                get {
                    try {
                        return ((string)(this[this.tableSalaryRegister.CONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CON\' in table \'SalaryRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalaryRegister.CONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LTA {
                get {
                    try {
                        return ((string)(this[this.tableSalaryRegister.LTAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LTA\' in table \'SalaryRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalaryRegister.LTAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MED {
                get {
                    try {
                        return ((string)(this[this.tableSalaryRegister.MEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MED\' in table \'SalaryRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalaryRegister.MEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PF {
                get {
                    try {
                        return ((string)(this[this.tableSalaryRegister.PFColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PF\' in table \'SalaryRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalaryRegister.PFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GrossSalary {
                get {
                    try {
                        return ((string)(this[this.tableSalaryRegister.GrossSalaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrossSalary\' in table \'SalaryRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalaryRegister.GrossSalaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NetSalary {
                get {
                    try {
                        return ((string)(this[this.tableSalaryRegister.NetSalaryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NetSalary\' in table \'SalaryRegister\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalaryRegister.NetSalaryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpCodeNull() {
                return this.IsNull(this.tableSalaryRegister.EmpCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpCodeNull() {
                this[this.tableSalaryRegister.EmpCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpNameNull() {
                return this.IsNull(this.tableSalaryRegister.EmpNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpNameNull() {
                this[this.tableSalaryRegister.EmpNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFatherNameNull() {
                return this.IsNull(this.tableSalaryRegister.FatherNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFatherNameNull() {
                this[this.tableSalaryRegister.FatherNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsESOPNull() {
                return this.IsNull(this.tableSalaryRegister.ESOPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetESOPNull() {
                this[this.tableSalaryRegister.ESOPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOJNull() {
                return this.IsNull(this.tableSalaryRegister.DOJColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOJNull() {
                this[this.tableSalaryRegister.DOJColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOBNull() {
                return this.IsNull(this.tableSalaryRegister.DOBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOBNull() {
                this[this.tableSalaryRegister.DOBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDesignationNull() {
                return this.IsNull(this.tableSalaryRegister.DesignationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDesignationNull() {
                this[this.tableSalaryRegister.DesignationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCTCNull() {
                return this.IsNull(this.tableSalaryRegister.CTCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCTCNull() {
                this[this.tableSalaryRegister.CTCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBasicNull() {
                return this.IsNull(this.tableSalaryRegister.BasicColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBasicNull() {
                this[this.tableSalaryRegister.BasicColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHRANull() {
                return this.IsNull(this.tableSalaryRegister.HRAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHRANull() {
                this[this.tableSalaryRegister.HRAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSPLNull() {
                return this.IsNull(this.tableSalaryRegister.SPLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSPLNull() {
                this[this.tableSalaryRegister.SPLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONNull() {
                return this.IsNull(this.tableSalaryRegister.CONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONNull() {
                this[this.tableSalaryRegister.CONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLTANull() {
                return this.IsNull(this.tableSalaryRegister.LTAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLTANull() {
                this[this.tableSalaryRegister.LTAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMEDNull() {
                return this.IsNull(this.tableSalaryRegister.MEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMEDNull() {
                this[this.tableSalaryRegister.MEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPFNull() {
                return this.IsNull(this.tableSalaryRegister.PFColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPFNull() {
                this[this.tableSalaryRegister.PFColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossSalaryNull() {
                return this.IsNull(this.tableSalaryRegister.GrossSalaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossSalaryNull() {
                this[this.tableSalaryRegister.GrossSalaryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNetSalaryNull() {
                return this.IsNull(this.tableSalaryRegister.NetSalaryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNetSalaryNull() {
                this[this.tableSalaryRegister.NetSalaryColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PaySlipRow : global::System.Data.DataRow {
            
            private PaySlipDataTable tablePaySlip;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaySlipRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePaySlip = ((PaySlipDataTable)(this.Table));
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SalaryRegisterRowChangeEvent : global::System.EventArgs {
            
            private SalaryRegisterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalaryRegisterRowChangeEvent(SalaryRegisterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SalaryRegisterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PaySlipRowChangeEvent : global::System.EventArgs {
            
            private PaySlipRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlipRowChangeEvent(PaySlipRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaySlipRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591