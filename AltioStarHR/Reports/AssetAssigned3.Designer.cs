//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ARATT.Reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("AssetAssigned")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class AssetAssigned : global::System.Data.DataSet {
        
        private TeamwiseDataTable tableTeamwise;
        
        private UserwiseDataTable tableUserwise;
        
        private OutgoingAssetsDataTable tableOutgoingAssets;
        
        private ExitManagementDataTable tableExitManagement;
        
        private TeamwiseEmployeeDataTable tableTeamwiseEmployee;
        
        private EmployeeJoiningDataTable tableEmployeeJoining;
        
        private Employee_Type_DataTable tableEmployee_Type_;
        
        private AllEmployeeDetailsDataTable tableAllEmployeeDetails;
        
        private Category_DetailsDataTable tableCategory_Details;
        
        private AssetCategorywiseDataTable tableAssetCategorywise;
        
        private EmployeeDetailsDataTable tableEmployeeDetails;
        
        private EducationDetailsDataTable tableEducationDetails;
        
        private CareerSummaryDataTable tableCareerSummary;
        
        private AllEMPEducationDetailsDataTable tableAllEMPEducationDetails;
        
        private AllEMPCareerSummaryDataTable tableAllEMPCareerSummary;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AssetAssigned() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected AssetAssigned(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Teamwise"] != null)) {
                    base.Tables.Add(new TeamwiseDataTable(ds.Tables["Teamwise"]));
                }
                if ((ds.Tables["Userwise"] != null)) {
                    base.Tables.Add(new UserwiseDataTable(ds.Tables["Userwise"]));
                }
                if ((ds.Tables["OutgoingAssets"] != null)) {
                    base.Tables.Add(new OutgoingAssetsDataTable(ds.Tables["OutgoingAssets"]));
                }
                if ((ds.Tables["ExitManagement"] != null)) {
                    base.Tables.Add(new ExitManagementDataTable(ds.Tables["ExitManagement"]));
                }
                if ((ds.Tables["TeamwiseEmployee"] != null)) {
                    base.Tables.Add(new TeamwiseEmployeeDataTable(ds.Tables["TeamwiseEmployee"]));
                }
                if ((ds.Tables["EmployeeJoining"] != null)) {
                    base.Tables.Add(new EmployeeJoiningDataTable(ds.Tables["EmployeeJoining"]));
                }
                if ((ds.Tables["Employee Type "] != null)) {
                    base.Tables.Add(new Employee_Type_DataTable(ds.Tables["Employee Type "]));
                }
                if ((ds.Tables["AllEmployeeDetails"] != null)) {
                    base.Tables.Add(new AllEmployeeDetailsDataTable(ds.Tables["AllEmployeeDetails"]));
                }
                if ((ds.Tables["Category Details"] != null)) {
                    base.Tables.Add(new Category_DetailsDataTable(ds.Tables["Category Details"]));
                }
                if ((ds.Tables["AssetCategorywise"] != null)) {
                    base.Tables.Add(new AssetCategorywiseDataTable(ds.Tables["AssetCategorywise"]));
                }
                if ((ds.Tables["EmployeeDetails"] != null)) {
                    base.Tables.Add(new EmployeeDetailsDataTable(ds.Tables["EmployeeDetails"]));
                }
                if ((ds.Tables["EducationDetails"] != null)) {
                    base.Tables.Add(new EducationDetailsDataTable(ds.Tables["EducationDetails"]));
                }
                if ((ds.Tables["CareerSummary"] != null)) {
                    base.Tables.Add(new CareerSummaryDataTable(ds.Tables["CareerSummary"]));
                }
                if ((ds.Tables["AllEMPEducationDetails"] != null)) {
                    base.Tables.Add(new AllEMPEducationDetailsDataTable(ds.Tables["AllEMPEducationDetails"]));
                }
                if ((ds.Tables["AllEMPCareerSummary"] != null)) {
                    base.Tables.Add(new AllEMPCareerSummaryDataTable(ds.Tables["AllEMPCareerSummary"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TeamwiseDataTable Teamwise {
            get {
                return this.tableTeamwise;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserwiseDataTable Userwise {
            get {
                return this.tableUserwise;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OutgoingAssetsDataTable OutgoingAssets {
            get {
                return this.tableOutgoingAssets;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExitManagementDataTable ExitManagement {
            get {
                return this.tableExitManagement;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TeamwiseEmployeeDataTable TeamwiseEmployee {
            get {
                return this.tableTeamwiseEmployee;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmployeeJoiningDataTable EmployeeJoining {
            get {
                return this.tableEmployeeJoining;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Employee_Type_DataTable Employee_Type_ {
            get {
                return this.tableEmployee_Type_;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AllEmployeeDetailsDataTable AllEmployeeDetails {
            get {
                return this.tableAllEmployeeDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Category_DetailsDataTable Category_Details {
            get {
                return this.tableCategory_Details;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AssetCategorywiseDataTable AssetCategorywise {
            get {
                return this.tableAssetCategorywise;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EmployeeDetailsDataTable EmployeeDetails {
            get {
                return this.tableEmployeeDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EducationDetailsDataTable EducationDetails {
            get {
                return this.tableEducationDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CareerSummaryDataTable CareerSummary {
            get {
                return this.tableCareerSummary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AllEMPEducationDetailsDataTable AllEMPEducationDetails {
            get {
                return this.tableAllEMPEducationDetails;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AllEMPCareerSummaryDataTable AllEMPCareerSummary {
            get {
                return this.tableAllEMPCareerSummary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            AssetAssigned cln = ((AssetAssigned)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Teamwise"] != null)) {
                    base.Tables.Add(new TeamwiseDataTable(ds.Tables["Teamwise"]));
                }
                if ((ds.Tables["Userwise"] != null)) {
                    base.Tables.Add(new UserwiseDataTable(ds.Tables["Userwise"]));
                }
                if ((ds.Tables["OutgoingAssets"] != null)) {
                    base.Tables.Add(new OutgoingAssetsDataTable(ds.Tables["OutgoingAssets"]));
                }
                if ((ds.Tables["ExitManagement"] != null)) {
                    base.Tables.Add(new ExitManagementDataTable(ds.Tables["ExitManagement"]));
                }
                if ((ds.Tables["TeamwiseEmployee"] != null)) {
                    base.Tables.Add(new TeamwiseEmployeeDataTable(ds.Tables["TeamwiseEmployee"]));
                }
                if ((ds.Tables["EmployeeJoining"] != null)) {
                    base.Tables.Add(new EmployeeJoiningDataTable(ds.Tables["EmployeeJoining"]));
                }
                if ((ds.Tables["Employee Type "] != null)) {
                    base.Tables.Add(new Employee_Type_DataTable(ds.Tables["Employee Type "]));
                }
                if ((ds.Tables["AllEmployeeDetails"] != null)) {
                    base.Tables.Add(new AllEmployeeDetailsDataTable(ds.Tables["AllEmployeeDetails"]));
                }
                if ((ds.Tables["Category Details"] != null)) {
                    base.Tables.Add(new Category_DetailsDataTable(ds.Tables["Category Details"]));
                }
                if ((ds.Tables["AssetCategorywise"] != null)) {
                    base.Tables.Add(new AssetCategorywiseDataTable(ds.Tables["AssetCategorywise"]));
                }
                if ((ds.Tables["EmployeeDetails"] != null)) {
                    base.Tables.Add(new EmployeeDetailsDataTable(ds.Tables["EmployeeDetails"]));
                }
                if ((ds.Tables["EducationDetails"] != null)) {
                    base.Tables.Add(new EducationDetailsDataTable(ds.Tables["EducationDetails"]));
                }
                if ((ds.Tables["CareerSummary"] != null)) {
                    base.Tables.Add(new CareerSummaryDataTable(ds.Tables["CareerSummary"]));
                }
                if ((ds.Tables["AllEMPEducationDetails"] != null)) {
                    base.Tables.Add(new AllEMPEducationDetailsDataTable(ds.Tables["AllEMPEducationDetails"]));
                }
                if ((ds.Tables["AllEMPCareerSummary"] != null)) {
                    base.Tables.Add(new AllEMPCareerSummaryDataTable(ds.Tables["AllEMPCareerSummary"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTeamwise = ((TeamwiseDataTable)(base.Tables["Teamwise"]));
            if ((initTable == true)) {
                if ((this.tableTeamwise != null)) {
                    this.tableTeamwise.InitVars();
                }
            }
            this.tableUserwise = ((UserwiseDataTable)(base.Tables["Userwise"]));
            if ((initTable == true)) {
                if ((this.tableUserwise != null)) {
                    this.tableUserwise.InitVars();
                }
            }
            this.tableOutgoingAssets = ((OutgoingAssetsDataTable)(base.Tables["OutgoingAssets"]));
            if ((initTable == true)) {
                if ((this.tableOutgoingAssets != null)) {
                    this.tableOutgoingAssets.InitVars();
                }
            }
            this.tableExitManagement = ((ExitManagementDataTable)(base.Tables["ExitManagement"]));
            if ((initTable == true)) {
                if ((this.tableExitManagement != null)) {
                    this.tableExitManagement.InitVars();
                }
            }
            this.tableTeamwiseEmployee = ((TeamwiseEmployeeDataTable)(base.Tables["TeamwiseEmployee"]));
            if ((initTable == true)) {
                if ((this.tableTeamwiseEmployee != null)) {
                    this.tableTeamwiseEmployee.InitVars();
                }
            }
            this.tableEmployeeJoining = ((EmployeeJoiningDataTable)(base.Tables["EmployeeJoining"]));
            if ((initTable == true)) {
                if ((this.tableEmployeeJoining != null)) {
                    this.tableEmployeeJoining.InitVars();
                }
            }
            this.tableEmployee_Type_ = ((Employee_Type_DataTable)(base.Tables["Employee Type "]));
            if ((initTable == true)) {
                if ((this.tableEmployee_Type_ != null)) {
                    this.tableEmployee_Type_.InitVars();
                }
            }
            this.tableAllEmployeeDetails = ((AllEmployeeDetailsDataTable)(base.Tables["AllEmployeeDetails"]));
            if ((initTable == true)) {
                if ((this.tableAllEmployeeDetails != null)) {
                    this.tableAllEmployeeDetails.InitVars();
                }
            }
            this.tableCategory_Details = ((Category_DetailsDataTable)(base.Tables["Category Details"]));
            if ((initTable == true)) {
                if ((this.tableCategory_Details != null)) {
                    this.tableCategory_Details.InitVars();
                }
            }
            this.tableAssetCategorywise = ((AssetCategorywiseDataTable)(base.Tables["AssetCategorywise"]));
            if ((initTable == true)) {
                if ((this.tableAssetCategorywise != null)) {
                    this.tableAssetCategorywise.InitVars();
                }
            }
            this.tableEmployeeDetails = ((EmployeeDetailsDataTable)(base.Tables["EmployeeDetails"]));
            if ((initTable == true)) {
                if ((this.tableEmployeeDetails != null)) {
                    this.tableEmployeeDetails.InitVars();
                }
            }
            this.tableEducationDetails = ((EducationDetailsDataTable)(base.Tables["EducationDetails"]));
            if ((initTable == true)) {
                if ((this.tableEducationDetails != null)) {
                    this.tableEducationDetails.InitVars();
                }
            }
            this.tableCareerSummary = ((CareerSummaryDataTable)(base.Tables["CareerSummary"]));
            if ((initTable == true)) {
                if ((this.tableCareerSummary != null)) {
                    this.tableCareerSummary.InitVars();
                }
            }
            this.tableAllEMPEducationDetails = ((AllEMPEducationDetailsDataTable)(base.Tables["AllEMPEducationDetails"]));
            if ((initTable == true)) {
                if ((this.tableAllEMPEducationDetails != null)) {
                    this.tableAllEMPEducationDetails.InitVars();
                }
            }
            this.tableAllEMPCareerSummary = ((AllEMPCareerSummaryDataTable)(base.Tables["AllEMPCareerSummary"]));
            if ((initTable == true)) {
                if ((this.tableAllEMPCareerSummary != null)) {
                    this.tableAllEMPCareerSummary.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "AssetAssigned";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/AssetAssigned.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTeamwise = new TeamwiseDataTable();
            base.Tables.Add(this.tableTeamwise);
            this.tableUserwise = new UserwiseDataTable();
            base.Tables.Add(this.tableUserwise);
            this.tableOutgoingAssets = new OutgoingAssetsDataTable();
            base.Tables.Add(this.tableOutgoingAssets);
            this.tableExitManagement = new ExitManagementDataTable();
            base.Tables.Add(this.tableExitManagement);
            this.tableTeamwiseEmployee = new TeamwiseEmployeeDataTable();
            base.Tables.Add(this.tableTeamwiseEmployee);
            this.tableEmployeeJoining = new EmployeeJoiningDataTable();
            base.Tables.Add(this.tableEmployeeJoining);
            this.tableEmployee_Type_ = new Employee_Type_DataTable();
            base.Tables.Add(this.tableEmployee_Type_);
            this.tableAllEmployeeDetails = new AllEmployeeDetailsDataTable();
            base.Tables.Add(this.tableAllEmployeeDetails);
            this.tableCategory_Details = new Category_DetailsDataTable();
            base.Tables.Add(this.tableCategory_Details);
            this.tableAssetCategorywise = new AssetCategorywiseDataTable();
            base.Tables.Add(this.tableAssetCategorywise);
            this.tableEmployeeDetails = new EmployeeDetailsDataTable();
            base.Tables.Add(this.tableEmployeeDetails);
            this.tableEducationDetails = new EducationDetailsDataTable();
            base.Tables.Add(this.tableEducationDetails);
            this.tableCareerSummary = new CareerSummaryDataTable();
            base.Tables.Add(this.tableCareerSummary);
            this.tableAllEMPEducationDetails = new AllEMPEducationDetailsDataTable();
            base.Tables.Add(this.tableAllEMPEducationDetails);
            this.tableAllEMPCareerSummary = new AllEMPCareerSummaryDataTable();
            base.Tables.Add(this.tableAllEMPCareerSummary);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTeamwise() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUserwise() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOutgoingAssets() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExitManagement() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTeamwiseEmployee() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmployeeJoining() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmployee_Type_() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAllEmployeeDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCategory_Details() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAssetCategorywise() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEmployeeDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEducationDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCareerSummary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAllEMPEducationDetails() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAllEMPCareerSummary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            AssetAssigned ds = new AssetAssigned();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TeamwiseRowChangeEventHandler(object sender, TeamwiseRowChangeEvent e);
        
        public delegate void UserwiseRowChangeEventHandler(object sender, UserwiseRowChangeEvent e);
        
        public delegate void OutgoingAssetsRowChangeEventHandler(object sender, OutgoingAssetsRowChangeEvent e);
        
        public delegate void ExitManagementRowChangeEventHandler(object sender, ExitManagementRowChangeEvent e);
        
        public delegate void TeamwiseEmployeeRowChangeEventHandler(object sender, TeamwiseEmployeeRowChangeEvent e);
        
        public delegate void EmployeeJoiningRowChangeEventHandler(object sender, EmployeeJoiningRowChangeEvent e);
        
        public delegate void Employee_Type_RowChangeEventHandler(object sender, Employee_Type_RowChangeEvent e);
        
        public delegate void AllEmployeeDetailsRowChangeEventHandler(object sender, AllEmployeeDetailsRowChangeEvent e);
        
        public delegate void Category_DetailsRowChangeEventHandler(object sender, Category_DetailsRowChangeEvent e);
        
        public delegate void AssetCategorywiseRowChangeEventHandler(object sender, AssetCategorywiseRowChangeEvent e);
        
        public delegate void EmployeeDetailsRowChangeEventHandler(object sender, EmployeeDetailsRowChangeEvent e);
        
        public delegate void EducationDetailsRowChangeEventHandler(object sender, EducationDetailsRowChangeEvent e);
        
        public delegate void CareerSummaryRowChangeEventHandler(object sender, CareerSummaryRowChangeEvent e);
        
        public delegate void AllEMPEducationDetailsRowChangeEventHandler(object sender, AllEMPEducationDetailsRowChangeEvent e);
        
        public delegate void AllEMPCareerSummaryRowChangeEventHandler(object sender, AllEMPCareerSummaryRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TeamwiseDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTeamName;
            
            private global::System.Data.DataColumn columnAssetCategory;
            
            private global::System.Data.DataColumn columnAssetSubCategory;
            
            private global::System.Data.DataColumn columnAssetName;
            
            private global::System.Data.DataColumn columnVendorDetails;
            
            private global::System.Data.DataColumn columnDateIssued;
            
            private global::System.Data.DataColumn columnDateReturned;
            
            private global::System.Data.DataColumn columnLocation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TeamwiseDataTable() {
                this.TableName = "Teamwise";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TeamwiseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TeamwiseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TeamNameColumn {
                get {
                    return this.columnTeamName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetCategoryColumn {
                get {
                    return this.columnAssetCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetSubCategoryColumn {
                get {
                    return this.columnAssetSubCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetNameColumn {
                get {
                    return this.columnAssetName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VendorDetailsColumn {
                get {
                    return this.columnVendorDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateIssuedColumn {
                get {
                    return this.columnDateIssued;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateReturnedColumn {
                get {
                    return this.columnDateReturned;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TeamwiseRow this[int index] {
                get {
                    return ((TeamwiseRow)(this.Rows[index]));
                }
            }
            
            public event TeamwiseRowChangeEventHandler TeamwiseRowChanging;
            
            public event TeamwiseRowChangeEventHandler TeamwiseRowChanged;
            
            public event TeamwiseRowChangeEventHandler TeamwiseRowDeleting;
            
            public event TeamwiseRowChangeEventHandler TeamwiseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTeamwiseRow(TeamwiseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TeamwiseRow AddTeamwiseRow(string TeamName, string AssetCategory, string AssetSubCategory, string AssetName, string VendorDetails, string DateIssued, string DateReturned, string Location) {
                TeamwiseRow rowTeamwiseRow = ((TeamwiseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TeamName,
                        AssetCategory,
                        AssetSubCategory,
                        AssetName,
                        VendorDetails,
                        DateIssued,
                        DateReturned,
                        Location};
                rowTeamwiseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTeamwiseRow);
                return rowTeamwiseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TeamwiseDataTable cln = ((TeamwiseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TeamwiseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTeamName = base.Columns["TeamName"];
                this.columnAssetCategory = base.Columns["AssetCategory"];
                this.columnAssetSubCategory = base.Columns["AssetSubCategory"];
                this.columnAssetName = base.Columns["AssetName"];
                this.columnVendorDetails = base.Columns["VendorDetails"];
                this.columnDateIssued = base.Columns["DateIssued"];
                this.columnDateReturned = base.Columns["DateReturned"];
                this.columnLocation = base.Columns["Location"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTeamName = new global::System.Data.DataColumn("TeamName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeamName);
                this.columnAssetCategory = new global::System.Data.DataColumn("AssetCategory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetCategory);
                this.columnAssetSubCategory = new global::System.Data.DataColumn("AssetSubCategory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetSubCategory);
                this.columnAssetName = new global::System.Data.DataColumn("AssetName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetName);
                this.columnVendorDetails = new global::System.Data.DataColumn("VendorDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVendorDetails);
                this.columnDateIssued = new global::System.Data.DataColumn("DateIssued", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateIssued);
                this.columnDateReturned = new global::System.Data.DataColumn("DateReturned", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateReturned);
                this.columnLocation = new global::System.Data.DataColumn("Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TeamwiseRow NewTeamwiseRow() {
                return ((TeamwiseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TeamwiseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TeamwiseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TeamwiseRowChanged != null)) {
                    this.TeamwiseRowChanged(this, new TeamwiseRowChangeEvent(((TeamwiseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TeamwiseRowChanging != null)) {
                    this.TeamwiseRowChanging(this, new TeamwiseRowChangeEvent(((TeamwiseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TeamwiseRowDeleted != null)) {
                    this.TeamwiseRowDeleted(this, new TeamwiseRowChangeEvent(((TeamwiseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TeamwiseRowDeleting != null)) {
                    this.TeamwiseRowDeleting(this, new TeamwiseRowChangeEvent(((TeamwiseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTeamwiseRow(TeamwiseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AssetAssigned ds = new AssetAssigned();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TeamwiseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserwiseDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmployeeName;
            
            private global::System.Data.DataColumn columnAssetCategory;
            
            private global::System.Data.DataColumn columnAssetSubCategory;
            
            private global::System.Data.DataColumn columnAssetName;
            
            private global::System.Data.DataColumn columnVendorDetails;
            
            private global::System.Data.DataColumn columnDateIssued;
            
            private global::System.Data.DataColumn columnDateReturned;
            
            private global::System.Data.DataColumn columnLocation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserwiseDataTable() {
                this.TableName = "Userwise";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserwiseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UserwiseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeNameColumn {
                get {
                    return this.columnEmployeeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetCategoryColumn {
                get {
                    return this.columnAssetCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetSubCategoryColumn {
                get {
                    return this.columnAssetSubCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetNameColumn {
                get {
                    return this.columnAssetName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VendorDetailsColumn {
                get {
                    return this.columnVendorDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateIssuedColumn {
                get {
                    return this.columnDateIssued;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateReturnedColumn {
                get {
                    return this.columnDateReturned;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationColumn {
                get {
                    return this.columnLocation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserwiseRow this[int index] {
                get {
                    return ((UserwiseRow)(this.Rows[index]));
                }
            }
            
            public event UserwiseRowChangeEventHandler UserwiseRowChanging;
            
            public event UserwiseRowChangeEventHandler UserwiseRowChanged;
            
            public event UserwiseRowChangeEventHandler UserwiseRowDeleting;
            
            public event UserwiseRowChangeEventHandler UserwiseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserwiseRow(UserwiseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserwiseRow AddUserwiseRow(string EmployeeName, string AssetCategory, string AssetSubCategory, string AssetName, string VendorDetails, string DateIssued, string DateReturned, string Location) {
                UserwiseRow rowUserwiseRow = ((UserwiseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmployeeName,
                        AssetCategory,
                        AssetSubCategory,
                        AssetName,
                        VendorDetails,
                        DateIssued,
                        DateReturned,
                        Location};
                rowUserwiseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUserwiseRow);
                return rowUserwiseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UserwiseDataTable cln = ((UserwiseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UserwiseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeName = base.Columns["EmployeeName"];
                this.columnAssetCategory = base.Columns["AssetCategory"];
                this.columnAssetSubCategory = base.Columns["AssetSubCategory"];
                this.columnAssetName = base.Columns["AssetName"];
                this.columnVendorDetails = base.Columns["VendorDetails"];
                this.columnDateIssued = base.Columns["DateIssued"];
                this.columnDateReturned = base.Columns["DateReturned"];
                this.columnLocation = base.Columns["Location"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeName = new global::System.Data.DataColumn("EmployeeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeName);
                this.columnAssetCategory = new global::System.Data.DataColumn("AssetCategory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetCategory);
                this.columnAssetSubCategory = new global::System.Data.DataColumn("AssetSubCategory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetSubCategory);
                this.columnAssetName = new global::System.Data.DataColumn("AssetName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetName);
                this.columnVendorDetails = new global::System.Data.DataColumn("VendorDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVendorDetails);
                this.columnDateIssued = new global::System.Data.DataColumn("DateIssued", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateIssued);
                this.columnDateReturned = new global::System.Data.DataColumn("DateReturned", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateReturned);
                this.columnLocation = new global::System.Data.DataColumn("Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocation);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserwiseRow NewUserwiseRow() {
                return ((UserwiseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UserwiseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UserwiseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserwiseRowChanged != null)) {
                    this.UserwiseRowChanged(this, new UserwiseRowChangeEvent(((UserwiseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserwiseRowChanging != null)) {
                    this.UserwiseRowChanging(this, new UserwiseRowChangeEvent(((UserwiseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserwiseRowDeleted != null)) {
                    this.UserwiseRowDeleted(this, new UserwiseRowChangeEvent(((UserwiseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserwiseRowDeleting != null)) {
                    this.UserwiseRowDeleting(this, new UserwiseRowChangeEvent(((UserwiseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserwiseRow(UserwiseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AssetAssigned ds = new AssetAssigned();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserwiseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OutgoingAssetsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnManufacturerDate;
            
            private global::System.Data.DataColumn columnWarrantyDate;
            
            private global::System.Data.DataColumn columnReason;
            
            private global::System.Data.DataColumn columnAssetCategory;
            
            private global::System.Data.DataColumn columnAssetSubCategory;
            
            private global::System.Data.DataColumn columnAssetName;
            
            private global::System.Data.DataColumn columnVendorDetails;
            
            private global::System.Data.DataColumn columnAssetCost;
            
            private global::System.Data.DataColumn columnReturningDate;
            
            private global::System.Data.DataColumn columnAssetNo;
            
            private global::System.Data.DataColumn columnManufacturerName;
            
            private global::System.Data.DataColumn columnOutgoingDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutgoingAssetsDataTable() {
                this.TableName = "OutgoingAssets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OutgoingAssetsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OutgoingAssetsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManufacturerDateColumn {
                get {
                    return this.columnManufacturerDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarrantyDateColumn {
                get {
                    return this.columnWarrantyDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReasonColumn {
                get {
                    return this.columnReason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetCategoryColumn {
                get {
                    return this.columnAssetCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetSubCategoryColumn {
                get {
                    return this.columnAssetSubCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetNameColumn {
                get {
                    return this.columnAssetName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VendorDetailsColumn {
                get {
                    return this.columnVendorDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetCostColumn {
                get {
                    return this.columnAssetCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReturningDateColumn {
                get {
                    return this.columnReturningDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetNoColumn {
                get {
                    return this.columnAssetNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManufacturerNameColumn {
                get {
                    return this.columnManufacturerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OutgoingDateColumn {
                get {
                    return this.columnOutgoingDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutgoingAssetsRow this[int index] {
                get {
                    return ((OutgoingAssetsRow)(this.Rows[index]));
                }
            }
            
            public event OutgoingAssetsRowChangeEventHandler OutgoingAssetsRowChanging;
            
            public event OutgoingAssetsRowChangeEventHandler OutgoingAssetsRowChanged;
            
            public event OutgoingAssetsRowChangeEventHandler OutgoingAssetsRowDeleting;
            
            public event OutgoingAssetsRowChangeEventHandler OutgoingAssetsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOutgoingAssetsRow(OutgoingAssetsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutgoingAssetsRow AddOutgoingAssetsRow(string ManufacturerDate, string WarrantyDate, string Reason, string AssetCategory, string AssetSubCategory, string AssetName, string VendorDetails, string AssetCost, string ReturningDate, string AssetNo, string ManufacturerName, string OutgoingDate) {
                OutgoingAssetsRow rowOutgoingAssetsRow = ((OutgoingAssetsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ManufacturerDate,
                        WarrantyDate,
                        Reason,
                        AssetCategory,
                        AssetSubCategory,
                        AssetName,
                        VendorDetails,
                        AssetCost,
                        ReturningDate,
                        AssetNo,
                        ManufacturerName,
                        OutgoingDate};
                rowOutgoingAssetsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOutgoingAssetsRow);
                return rowOutgoingAssetsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OutgoingAssetsDataTable cln = ((OutgoingAssetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OutgoingAssetsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnManufacturerDate = base.Columns["ManufacturerDate"];
                this.columnWarrantyDate = base.Columns["WarrantyDate"];
                this.columnReason = base.Columns["Reason"];
                this.columnAssetCategory = base.Columns["AssetCategory"];
                this.columnAssetSubCategory = base.Columns["AssetSubCategory"];
                this.columnAssetName = base.Columns["AssetName"];
                this.columnVendorDetails = base.Columns["VendorDetails"];
                this.columnAssetCost = base.Columns["AssetCost"];
                this.columnReturningDate = base.Columns["ReturningDate"];
                this.columnAssetNo = base.Columns["AssetNo"];
                this.columnManufacturerName = base.Columns["ManufacturerName"];
                this.columnOutgoingDate = base.Columns["OutgoingDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnManufacturerDate = new global::System.Data.DataColumn("ManufacturerDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerDate);
                this.columnWarrantyDate = new global::System.Data.DataColumn("WarrantyDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarrantyDate);
                this.columnReason = new global::System.Data.DataColumn("Reason", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReason);
                this.columnAssetCategory = new global::System.Data.DataColumn("AssetCategory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetCategory);
                this.columnAssetSubCategory = new global::System.Data.DataColumn("AssetSubCategory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetSubCategory);
                this.columnAssetName = new global::System.Data.DataColumn("AssetName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetName);
                this.columnVendorDetails = new global::System.Data.DataColumn("VendorDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVendorDetails);
                this.columnAssetCost = new global::System.Data.DataColumn("AssetCost", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetCost);
                this.columnReturningDate = new global::System.Data.DataColumn("ReturningDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReturningDate);
                this.columnAssetNo = new global::System.Data.DataColumn("AssetNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetNo);
                this.columnManufacturerName = new global::System.Data.DataColumn("ManufacturerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerName);
                this.columnOutgoingDate = new global::System.Data.DataColumn("OutgoingDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOutgoingDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutgoingAssetsRow NewOutgoingAssetsRow() {
                return ((OutgoingAssetsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OutgoingAssetsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OutgoingAssetsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OutgoingAssetsRowChanged != null)) {
                    this.OutgoingAssetsRowChanged(this, new OutgoingAssetsRowChangeEvent(((OutgoingAssetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OutgoingAssetsRowChanging != null)) {
                    this.OutgoingAssetsRowChanging(this, new OutgoingAssetsRowChangeEvent(((OutgoingAssetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OutgoingAssetsRowDeleted != null)) {
                    this.OutgoingAssetsRowDeleted(this, new OutgoingAssetsRowChangeEvent(((OutgoingAssetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OutgoingAssetsRowDeleting != null)) {
                    this.OutgoingAssetsRowDeleting(this, new OutgoingAssetsRowChangeEvent(((OutgoingAssetsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOutgoingAssetsRow(OutgoingAssetsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AssetAssigned ds = new AssetAssigned();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OutgoingAssetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExitManagementDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmploymentType;
            
            private global::System.Data.DataColumn columnEmployeeCode;
            
            private global::System.Data.DataColumn columnEmployeeName;
            
            private global::System.Data.DataColumn columnDesignation;
            
            private global::System.Data.DataColumn columnTeam;
            
            private global::System.Data.DataColumn columnManagerName;
            
            private global::System.Data.DataColumn columnJoiningDate;
            
            private global::System.Data.DataColumn columnExitDate;
            
            private global::System.Data.DataColumn columnTypeOfExit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExitManagementDataTable() {
                this.TableName = "ExitManagement";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExitManagementDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExitManagementDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmploymentTypeColumn {
                get {
                    return this.columnEmploymentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeCodeColumn {
                get {
                    return this.columnEmployeeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeNameColumn {
                get {
                    return this.columnEmployeeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DesignationColumn {
                get {
                    return this.columnDesignation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TeamColumn {
                get {
                    return this.columnTeam;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManagerNameColumn {
                get {
                    return this.columnManagerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JoiningDateColumn {
                get {
                    return this.columnJoiningDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExitDateColumn {
                get {
                    return this.columnExitDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfExitColumn {
                get {
                    return this.columnTypeOfExit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExitManagementRow this[int index] {
                get {
                    return ((ExitManagementRow)(this.Rows[index]));
                }
            }
            
            public event ExitManagementRowChangeEventHandler ExitManagementRowChanging;
            
            public event ExitManagementRowChangeEventHandler ExitManagementRowChanged;
            
            public event ExitManagementRowChangeEventHandler ExitManagementRowDeleting;
            
            public event ExitManagementRowChangeEventHandler ExitManagementRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExitManagementRow(ExitManagementRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExitManagementRow AddExitManagementRow(string EmploymentType, string EmployeeCode, string EmployeeName, string Designation, string Team, string ManagerName, string JoiningDate, string ExitDate, string TypeOfExit) {
                ExitManagementRow rowExitManagementRow = ((ExitManagementRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmploymentType,
                        EmployeeCode,
                        EmployeeName,
                        Designation,
                        Team,
                        ManagerName,
                        JoiningDate,
                        ExitDate,
                        TypeOfExit};
                rowExitManagementRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExitManagementRow);
                return rowExitManagementRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ExitManagementDataTable cln = ((ExitManagementDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ExitManagementDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmploymentType = base.Columns["EmploymentType"];
                this.columnEmployeeCode = base.Columns["EmployeeCode"];
                this.columnEmployeeName = base.Columns["EmployeeName"];
                this.columnDesignation = base.Columns["Designation"];
                this.columnTeam = base.Columns["Team"];
                this.columnManagerName = base.Columns["ManagerName"];
                this.columnJoiningDate = base.Columns["JoiningDate"];
                this.columnExitDate = base.Columns["ExitDate"];
                this.columnTypeOfExit = base.Columns["TypeOfExit"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmploymentType = new global::System.Data.DataColumn("EmploymentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmploymentType);
                this.columnEmployeeCode = new global::System.Data.DataColumn("EmployeeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeCode);
                this.columnEmployeeName = new global::System.Data.DataColumn("EmployeeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeName);
                this.columnDesignation = new global::System.Data.DataColumn("Designation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesignation);
                this.columnTeam = new global::System.Data.DataColumn("Team", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeam);
                this.columnManagerName = new global::System.Data.DataColumn("ManagerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManagerName);
                this.columnJoiningDate = new global::System.Data.DataColumn("JoiningDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJoiningDate);
                this.columnExitDate = new global::System.Data.DataColumn("ExitDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExitDate);
                this.columnTypeOfExit = new global::System.Data.DataColumn("TypeOfExit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfExit);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExitManagementRow NewExitManagementRow() {
                return ((ExitManagementRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ExitManagementRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ExitManagementRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExitManagementRowChanged != null)) {
                    this.ExitManagementRowChanged(this, new ExitManagementRowChangeEvent(((ExitManagementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExitManagementRowChanging != null)) {
                    this.ExitManagementRowChanging(this, new ExitManagementRowChangeEvent(((ExitManagementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExitManagementRowDeleted != null)) {
                    this.ExitManagementRowDeleted(this, new ExitManagementRowChangeEvent(((ExitManagementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExitManagementRowDeleting != null)) {
                    this.ExitManagementRowDeleting(this, new ExitManagementRowChangeEvent(((ExitManagementRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExitManagementRow(ExitManagementRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AssetAssigned ds = new AssetAssigned();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExitManagementDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TeamwiseEmployeeDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmployeeCode;
            
            private global::System.Data.DataColumn columnEmployeeName;
            
            private global::System.Data.DataColumn columnEmploymentType;
            
            private global::System.Data.DataColumn columnDesignation;
            
            private global::System.Data.DataColumn columnJoiningDate;
            
            private global::System.Data.DataColumn columnManagerName;
            
            private global::System.Data.DataColumn columnTeamName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TeamwiseEmployeeDataTable() {
                this.TableName = "TeamwiseEmployee";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TeamwiseEmployeeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TeamwiseEmployeeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeCodeColumn {
                get {
                    return this.columnEmployeeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeNameColumn {
                get {
                    return this.columnEmployeeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmploymentTypeColumn {
                get {
                    return this.columnEmploymentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DesignationColumn {
                get {
                    return this.columnDesignation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JoiningDateColumn {
                get {
                    return this.columnJoiningDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManagerNameColumn {
                get {
                    return this.columnManagerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TeamNameColumn {
                get {
                    return this.columnTeamName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TeamwiseEmployeeRow this[int index] {
                get {
                    return ((TeamwiseEmployeeRow)(this.Rows[index]));
                }
            }
            
            public event TeamwiseEmployeeRowChangeEventHandler TeamwiseEmployeeRowChanging;
            
            public event TeamwiseEmployeeRowChangeEventHandler TeamwiseEmployeeRowChanged;
            
            public event TeamwiseEmployeeRowChangeEventHandler TeamwiseEmployeeRowDeleting;
            
            public event TeamwiseEmployeeRowChangeEventHandler TeamwiseEmployeeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTeamwiseEmployeeRow(TeamwiseEmployeeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TeamwiseEmployeeRow AddTeamwiseEmployeeRow(string EmployeeCode, string EmployeeName, string EmploymentType, string Designation, string JoiningDate, string ManagerName, string TeamName) {
                TeamwiseEmployeeRow rowTeamwiseEmployeeRow = ((TeamwiseEmployeeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmployeeCode,
                        EmployeeName,
                        EmploymentType,
                        Designation,
                        JoiningDate,
                        ManagerName,
                        TeamName};
                rowTeamwiseEmployeeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTeamwiseEmployeeRow);
                return rowTeamwiseEmployeeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TeamwiseEmployeeDataTable cln = ((TeamwiseEmployeeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TeamwiseEmployeeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeCode = base.Columns["EmployeeCode"];
                this.columnEmployeeName = base.Columns["EmployeeName"];
                this.columnEmploymentType = base.Columns["EmploymentType"];
                this.columnDesignation = base.Columns["Designation"];
                this.columnJoiningDate = base.Columns["JoiningDate"];
                this.columnManagerName = base.Columns["ManagerName"];
                this.columnTeamName = base.Columns["TeamName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeCode = new global::System.Data.DataColumn("EmployeeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeCode);
                this.columnEmployeeName = new global::System.Data.DataColumn("EmployeeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeName);
                this.columnEmploymentType = new global::System.Data.DataColumn("EmploymentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmploymentType);
                this.columnDesignation = new global::System.Data.DataColumn("Designation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesignation);
                this.columnJoiningDate = new global::System.Data.DataColumn("JoiningDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJoiningDate);
                this.columnManagerName = new global::System.Data.DataColumn("ManagerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManagerName);
                this.columnTeamName = new global::System.Data.DataColumn("TeamName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeamName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TeamwiseEmployeeRow NewTeamwiseEmployeeRow() {
                return ((TeamwiseEmployeeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TeamwiseEmployeeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TeamwiseEmployeeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TeamwiseEmployeeRowChanged != null)) {
                    this.TeamwiseEmployeeRowChanged(this, new TeamwiseEmployeeRowChangeEvent(((TeamwiseEmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TeamwiseEmployeeRowChanging != null)) {
                    this.TeamwiseEmployeeRowChanging(this, new TeamwiseEmployeeRowChangeEvent(((TeamwiseEmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TeamwiseEmployeeRowDeleted != null)) {
                    this.TeamwiseEmployeeRowDeleted(this, new TeamwiseEmployeeRowChangeEvent(((TeamwiseEmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TeamwiseEmployeeRowDeleting != null)) {
                    this.TeamwiseEmployeeRowDeleting(this, new TeamwiseEmployeeRowChangeEvent(((TeamwiseEmployeeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTeamwiseEmployeeRow(TeamwiseEmployeeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AssetAssigned ds = new AssetAssigned();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TeamwiseEmployeeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmployeeJoiningDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmployeeCode;
            
            private global::System.Data.DataColumn columnEmployeeName;
            
            private global::System.Data.DataColumn columnEmploymentType;
            
            private global::System.Data.DataColumn columnDesignation;
            
            private global::System.Data.DataColumn columnTeamName;
            
            private global::System.Data.DataColumn columnManagerName;
            
            private global::System.Data.DataColumn columnEmpJoiningDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeJoiningDataTable() {
                this.TableName = "EmployeeJoining";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeJoiningDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmployeeJoiningDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeCodeColumn {
                get {
                    return this.columnEmployeeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeNameColumn {
                get {
                    return this.columnEmployeeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmploymentTypeColumn {
                get {
                    return this.columnEmploymentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DesignationColumn {
                get {
                    return this.columnDesignation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TeamNameColumn {
                get {
                    return this.columnTeamName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManagerNameColumn {
                get {
                    return this.columnManagerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmpJoiningDateColumn {
                get {
                    return this.columnEmpJoiningDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeJoiningRow this[int index] {
                get {
                    return ((EmployeeJoiningRow)(this.Rows[index]));
                }
            }
            
            public event EmployeeJoiningRowChangeEventHandler EmployeeJoiningRowChanging;
            
            public event EmployeeJoiningRowChangeEventHandler EmployeeJoiningRowChanged;
            
            public event EmployeeJoiningRowChangeEventHandler EmployeeJoiningRowDeleting;
            
            public event EmployeeJoiningRowChangeEventHandler EmployeeJoiningRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmployeeJoiningRow(EmployeeJoiningRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeJoiningRow AddEmployeeJoiningRow(string EmployeeCode, string EmployeeName, string EmploymentType, string Designation, string TeamName, string ManagerName, string EmpJoiningDate) {
                EmployeeJoiningRow rowEmployeeJoiningRow = ((EmployeeJoiningRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmployeeCode,
                        EmployeeName,
                        EmploymentType,
                        Designation,
                        TeamName,
                        ManagerName,
                        EmpJoiningDate};
                rowEmployeeJoiningRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmployeeJoiningRow);
                return rowEmployeeJoiningRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmployeeJoiningDataTable cln = ((EmployeeJoiningDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmployeeJoiningDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeCode = base.Columns["EmployeeCode"];
                this.columnEmployeeName = base.Columns["EmployeeName"];
                this.columnEmploymentType = base.Columns["EmploymentType"];
                this.columnDesignation = base.Columns["Designation"];
                this.columnTeamName = base.Columns["TeamName"];
                this.columnManagerName = base.Columns["ManagerName"];
                this.columnEmpJoiningDate = base.Columns["EmpJoiningDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeCode = new global::System.Data.DataColumn("EmployeeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeCode);
                this.columnEmployeeName = new global::System.Data.DataColumn("EmployeeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeName);
                this.columnEmploymentType = new global::System.Data.DataColumn("EmploymentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmploymentType);
                this.columnDesignation = new global::System.Data.DataColumn("Designation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesignation);
                this.columnTeamName = new global::System.Data.DataColumn("TeamName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeamName);
                this.columnManagerName = new global::System.Data.DataColumn("ManagerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManagerName);
                this.columnEmpJoiningDate = new global::System.Data.DataColumn("EmpJoiningDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmpJoiningDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeJoiningRow NewEmployeeJoiningRow() {
                return ((EmployeeJoiningRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmployeeJoiningRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmployeeJoiningRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmployeeJoiningRowChanged != null)) {
                    this.EmployeeJoiningRowChanged(this, new EmployeeJoiningRowChangeEvent(((EmployeeJoiningRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmployeeJoiningRowChanging != null)) {
                    this.EmployeeJoiningRowChanging(this, new EmployeeJoiningRowChangeEvent(((EmployeeJoiningRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmployeeJoiningRowDeleted != null)) {
                    this.EmployeeJoiningRowDeleted(this, new EmployeeJoiningRowChangeEvent(((EmployeeJoiningRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmployeeJoiningRowDeleting != null)) {
                    this.EmployeeJoiningRowDeleting(this, new EmployeeJoiningRowChangeEvent(((EmployeeJoiningRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmployeeJoiningRow(EmployeeJoiningRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AssetAssigned ds = new AssetAssigned();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmployeeJoiningDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Employee_Type_DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnTeamName;
            
            private global::System.Data.DataColumn columnManager_Name;
            
            private global::System.Data.DataColumn columnEmployee_Code;
            
            private global::System.Data.DataColumn columnEmployee_Name;
            
            private global::System.Data.DataColumn columnEmployment_Type;
            
            private global::System.Data.DataColumn columnDesignation;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Employee_Type_DataTable() {
                this.TableName = "Employee Type ";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Employee_Type_DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Employee_Type_DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TeamNameColumn {
                get {
                    return this.columnTeamName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Manager_NameColumn {
                get {
                    return this.columnManager_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Employee_CodeColumn {
                get {
                    return this.columnEmployee_Code;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Employee_NameColumn {
                get {
                    return this.columnEmployee_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Employment_TypeColumn {
                get {
                    return this.columnEmployment_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DesignationColumn {
                get {
                    return this.columnDesignation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Employee_Type_Row this[int index] {
                get {
                    return ((Employee_Type_Row)(this.Rows[index]));
                }
            }
            
            public event Employee_Type_RowChangeEventHandler Employee_Type_RowChanging;
            
            public event Employee_Type_RowChangeEventHandler Employee_Type_RowChanged;
            
            public event Employee_Type_RowChangeEventHandler Employee_Type_RowDeleting;
            
            public event Employee_Type_RowChangeEventHandler Employee_Type_RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmployee_Type_Row(Employee_Type_Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Employee_Type_Row AddEmployee_Type_Row(string TeamName, string Manager_Name, string Employee_Code, string Employee_Name, string Employment_Type, string Designation) {
                Employee_Type_Row rowEmployee_Type_Row = ((Employee_Type_Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TeamName,
                        Manager_Name,
                        Employee_Code,
                        Employee_Name,
                        Employment_Type,
                        Designation};
                rowEmployee_Type_Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmployee_Type_Row);
                return rowEmployee_Type_Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Employee_Type_DataTable cln = ((Employee_Type_DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Employee_Type_DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTeamName = base.Columns["TeamName"];
                this.columnManager_Name = base.Columns["Manager Name"];
                this.columnEmployee_Code = base.Columns["Employee Code"];
                this.columnEmployee_Name = base.Columns["Employee Name"];
                this.columnEmployment_Type = base.Columns["Employment Type"];
                this.columnDesignation = base.Columns["Designation"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTeamName = new global::System.Data.DataColumn("TeamName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeamName);
                this.columnManager_Name = new global::System.Data.DataColumn("Manager Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManager_Name);
                this.columnEmployee_Code = new global::System.Data.DataColumn("Employee Code", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployee_Code);
                this.columnEmployee_Name = new global::System.Data.DataColumn("Employee Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployee_Name);
                this.columnEmployment_Type = new global::System.Data.DataColumn("Employment Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployment_Type);
                this.columnDesignation = new global::System.Data.DataColumn("Designation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesignation);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Employee_Type_Row NewEmployee_Type_Row() {
                return ((Employee_Type_Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Employee_Type_Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Employee_Type_Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Employee_Type_RowChanged != null)) {
                    this.Employee_Type_RowChanged(this, new Employee_Type_RowChangeEvent(((Employee_Type_Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Employee_Type_RowChanging != null)) {
                    this.Employee_Type_RowChanging(this, new Employee_Type_RowChangeEvent(((Employee_Type_Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Employee_Type_RowDeleted != null)) {
                    this.Employee_Type_RowDeleted(this, new Employee_Type_RowChangeEvent(((Employee_Type_Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Employee_Type_RowDeleting != null)) {
                    this.Employee_Type_RowDeleting(this, new Employee_Type_RowChangeEvent(((Employee_Type_Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmployee_Type_Row(Employee_Type_Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AssetAssigned ds = new AssetAssigned();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Employee_Type_DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AllEmployeeDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmployeeCode;
            
            private global::System.Data.DataColumn columnEmployeeName;
            
            private global::System.Data.DataColumn columnLocationName;
            
            private global::System.Data.DataColumn columnManagerName;
            
            private global::System.Data.DataColumn columnJoiningDate;
            
            private global::System.Data.DataColumn columnHikePer;
            
            private global::System.Data.DataColumn columnSalaryHikeAmount;
            
            private global::System.Data.DataColumn columnCTC;
            
            private global::System.Data.DataColumn columnESOP;
            
            private global::System.Data.DataColumn columnDOB;
            
            private global::System.Data.DataColumn columnGender;
            
            private global::System.Data.DataColumn columnPersonalEmailID;
            
            private global::System.Data.DataColumn columnEducation;
            
            private global::System.Data.DataColumn columnStream;
            
            private global::System.Data.DataColumn columnUniversity;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnCompanyName;
            
            private global::System.Data.DataColumn columnCurrentAddress;
            
            private global::System.Data.DataColumn columnPermanentAddress;
            
            private global::System.Data.DataColumn columnResidenceNumber;
            
            private global::System.Data.DataColumn columnEmergencyContactNumber;
            
            private global::System.Data.DataColumn columnMobileNumber;
            
            private global::System.Data.DataColumn columnExitDate;
            
            private global::System.Data.DataColumn columnDesignation;
            
            private global::System.Data.DataColumn columnEmployeeID;
            
            private global::System.Data.DataColumn columnExperienceYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllEmployeeDetailsDataTable() {
                this.TableName = "AllEmployeeDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AllEmployeeDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AllEmployeeDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeCodeColumn {
                get {
                    return this.columnEmployeeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeNameColumn {
                get {
                    return this.columnEmployeeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationNameColumn {
                get {
                    return this.columnLocationName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManagerNameColumn {
                get {
                    return this.columnManagerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JoiningDateColumn {
                get {
                    return this.columnJoiningDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HikePerColumn {
                get {
                    return this.columnHikePer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalaryHikeAmountColumn {
                get {
                    return this.columnSalaryHikeAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CTCColumn {
                get {
                    return this.columnCTC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ESOPColumn {
                get {
                    return this.columnESOP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOBColumn {
                get {
                    return this.columnDOB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenderColumn {
                get {
                    return this.columnGender;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PersonalEmailIDColumn {
                get {
                    return this.columnPersonalEmailID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EducationColumn {
                get {
                    return this.columnEducation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreamColumn {
                get {
                    return this.columnStream;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UniversityColumn {
                get {
                    return this.columnUniversity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentAddressColumn {
                get {
                    return this.columnCurrentAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermanentAddressColumn {
                get {
                    return this.columnPermanentAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResidenceNumberColumn {
                get {
                    return this.columnResidenceNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmergencyContactNumberColumn {
                get {
                    return this.columnEmergencyContactNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MobileNumberColumn {
                get {
                    return this.columnMobileNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExitDateColumn {
                get {
                    return this.columnExitDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DesignationColumn {
                get {
                    return this.columnDesignation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeIDColumn {
                get {
                    return this.columnEmployeeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExperienceYearColumn {
                get {
                    return this.columnExperienceYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllEmployeeDetailsRow this[int index] {
                get {
                    return ((AllEmployeeDetailsRow)(this.Rows[index]));
                }
            }
            
            public event AllEmployeeDetailsRowChangeEventHandler AllEmployeeDetailsRowChanging;
            
            public event AllEmployeeDetailsRowChangeEventHandler AllEmployeeDetailsRowChanged;
            
            public event AllEmployeeDetailsRowChangeEventHandler AllEmployeeDetailsRowDeleting;
            
            public event AllEmployeeDetailsRowChangeEventHandler AllEmployeeDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAllEmployeeDetailsRow(AllEmployeeDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllEmployeeDetailsRow AddAllEmployeeDetailsRow(
                        string EmployeeCode, 
                        string EmployeeName, 
                        string LocationName, 
                        string ManagerName, 
                        string JoiningDate, 
                        string HikePer, 
                        string SalaryHikeAmount, 
                        string CTC, 
                        string ESOP, 
                        string DOB, 
                        string Gender, 
                        string PersonalEmailID, 
                        string Education, 
                        string Stream, 
                        string University, 
                        string Year, 
                        string StartDate, 
                        string EndDate, 
                        string CompanyName, 
                        string CurrentAddress, 
                        string PermanentAddress, 
                        string ResidenceNumber, 
                        string EmergencyContactNumber, 
                        string MobileNumber, 
                        string ExitDate, 
                        string Designation, 
                        string EmployeeID, 
                        string ExperienceYear) {
                AllEmployeeDetailsRow rowAllEmployeeDetailsRow = ((AllEmployeeDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmployeeCode,
                        EmployeeName,
                        LocationName,
                        ManagerName,
                        JoiningDate,
                        HikePer,
                        SalaryHikeAmount,
                        CTC,
                        ESOP,
                        DOB,
                        Gender,
                        PersonalEmailID,
                        Education,
                        Stream,
                        University,
                        Year,
                        StartDate,
                        EndDate,
                        CompanyName,
                        CurrentAddress,
                        PermanentAddress,
                        ResidenceNumber,
                        EmergencyContactNumber,
                        MobileNumber,
                        ExitDate,
                        Designation,
                        EmployeeID,
                        ExperienceYear};
                rowAllEmployeeDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAllEmployeeDetailsRow);
                return rowAllEmployeeDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AllEmployeeDetailsDataTable cln = ((AllEmployeeDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AllEmployeeDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeCode = base.Columns["EmployeeCode"];
                this.columnEmployeeName = base.Columns["EmployeeName"];
                this.columnLocationName = base.Columns["LocationName"];
                this.columnManagerName = base.Columns["ManagerName"];
                this.columnJoiningDate = base.Columns["JoiningDate"];
                this.columnHikePer = base.Columns["HikePer"];
                this.columnSalaryHikeAmount = base.Columns["SalaryHikeAmount"];
                this.columnCTC = base.Columns["CTC"];
                this.columnESOP = base.Columns["ESOP"];
                this.columnDOB = base.Columns["DOB"];
                this.columnGender = base.Columns["Gender"];
                this.columnPersonalEmailID = base.Columns["PersonalEmailID"];
                this.columnEducation = base.Columns["Education"];
                this.columnStream = base.Columns["Stream"];
                this.columnUniversity = base.Columns["University"];
                this.columnYear = base.Columns["Year"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnCurrentAddress = base.Columns["CurrentAddress"];
                this.columnPermanentAddress = base.Columns["PermanentAddress"];
                this.columnResidenceNumber = base.Columns["ResidenceNumber"];
                this.columnEmergencyContactNumber = base.Columns["EmergencyContactNumber"];
                this.columnMobileNumber = base.Columns["MobileNumber"];
                this.columnExitDate = base.Columns["ExitDate"];
                this.columnDesignation = base.Columns["Designation"];
                this.columnEmployeeID = base.Columns["EmployeeID"];
                this.columnExperienceYear = base.Columns["ExperienceYear"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeCode = new global::System.Data.DataColumn("EmployeeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeCode);
                this.columnEmployeeName = new global::System.Data.DataColumn("EmployeeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeName);
                this.columnLocationName = new global::System.Data.DataColumn("LocationName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationName);
                this.columnManagerName = new global::System.Data.DataColumn("ManagerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManagerName);
                this.columnJoiningDate = new global::System.Data.DataColumn("JoiningDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJoiningDate);
                this.columnHikePer = new global::System.Data.DataColumn("HikePer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHikePer);
                this.columnSalaryHikeAmount = new global::System.Data.DataColumn("SalaryHikeAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalaryHikeAmount);
                this.columnCTC = new global::System.Data.DataColumn("CTC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCTC);
                this.columnESOP = new global::System.Data.DataColumn("ESOP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnESOP);
                this.columnDOB = new global::System.Data.DataColumn("DOB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOB);
                this.columnGender = new global::System.Data.DataColumn("Gender", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGender);
                this.columnPersonalEmailID = new global::System.Data.DataColumn("PersonalEmailID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPersonalEmailID);
                this.columnEducation = new global::System.Data.DataColumn("Education", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEducation);
                this.columnStream = new global::System.Data.DataColumn("Stream", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStream);
                this.columnUniversity = new global::System.Data.DataColumn("University", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUniversity);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnCompanyName = new global::System.Data.DataColumn("CompanyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyName);
                this.columnCurrentAddress = new global::System.Data.DataColumn("CurrentAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentAddress);
                this.columnPermanentAddress = new global::System.Data.DataColumn("PermanentAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermanentAddress);
                this.columnResidenceNumber = new global::System.Data.DataColumn("ResidenceNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResidenceNumber);
                this.columnEmergencyContactNumber = new global::System.Data.DataColumn("EmergencyContactNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmergencyContactNumber);
                this.columnMobileNumber = new global::System.Data.DataColumn("MobileNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMobileNumber);
                this.columnExitDate = new global::System.Data.DataColumn("ExitDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExitDate);
                this.columnDesignation = new global::System.Data.DataColumn("Designation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesignation);
                this.columnEmployeeID = new global::System.Data.DataColumn("EmployeeID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeID);
                this.columnExperienceYear = new global::System.Data.DataColumn("ExperienceYear", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExperienceYear);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllEmployeeDetailsRow NewAllEmployeeDetailsRow() {
                return ((AllEmployeeDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AllEmployeeDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AllEmployeeDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AllEmployeeDetailsRowChanged != null)) {
                    this.AllEmployeeDetailsRowChanged(this, new AllEmployeeDetailsRowChangeEvent(((AllEmployeeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AllEmployeeDetailsRowChanging != null)) {
                    this.AllEmployeeDetailsRowChanging(this, new AllEmployeeDetailsRowChangeEvent(((AllEmployeeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AllEmployeeDetailsRowDeleted != null)) {
                    this.AllEmployeeDetailsRowDeleted(this, new AllEmployeeDetailsRowChangeEvent(((AllEmployeeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AllEmployeeDetailsRowDeleting != null)) {
                    this.AllEmployeeDetailsRowDeleting(this, new AllEmployeeDetailsRowChangeEvent(((AllEmployeeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAllEmployeeDetailsRow(AllEmployeeDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AssetAssigned ds = new AssetAssigned();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AllEmployeeDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Category_DetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAsset_Name;
            
            private global::System.Data.DataColumn columnDetails;
            
            private global::System.Data.DataColumn columnAsset_category;
            
            private global::System.Data.DataColumn columnAsset_sub_category;
            
            private global::System.Data.DataColumn columnManufacturer;
            
            private global::System.Data.DataColumn columnManufacturing_date;
            
            private global::System.Data.DataColumn columnWarranty_Details;
            
            private global::System.Data.DataColumn columnAsset_Cost;
            
            private global::System.Data.DataColumn columnVendor_details;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Category_DetailsDataTable() {
                this.TableName = "Category Details";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Category_DetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Category_DetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Asset_NameColumn {
                get {
                    return this.columnAsset_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DetailsColumn {
                get {
                    return this.columnDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Asset_categoryColumn {
                get {
                    return this.columnAsset_category;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Asset_sub_categoryColumn {
                get {
                    return this.columnAsset_sub_category;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManufacturerColumn {
                get {
                    return this.columnManufacturer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Manufacturing_dateColumn {
                get {
                    return this.columnManufacturing_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Warranty_DetailsColumn {
                get {
                    return this.columnWarranty_Details;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Asset_CostColumn {
                get {
                    return this.columnAsset_Cost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Vendor_detailsColumn {
                get {
                    return this.columnVendor_details;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Category_DetailsRow this[int index] {
                get {
                    return ((Category_DetailsRow)(this.Rows[index]));
                }
            }
            
            public event Category_DetailsRowChangeEventHandler Category_DetailsRowChanging;
            
            public event Category_DetailsRowChangeEventHandler Category_DetailsRowChanged;
            
            public event Category_DetailsRowChangeEventHandler Category_DetailsRowDeleting;
            
            public event Category_DetailsRowChangeEventHandler Category_DetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCategory_DetailsRow(Category_DetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Category_DetailsRow AddCategory_DetailsRow(string Asset_Name, string Details, string Asset_category, string Asset_sub_category, string Manufacturer, string Manufacturing_date, string Warranty_Details, string Asset_Cost, string Vendor_details) {
                Category_DetailsRow rowCategory_DetailsRow = ((Category_DetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Asset_Name,
                        Details,
                        Asset_category,
                        Asset_sub_category,
                        Manufacturer,
                        Manufacturing_date,
                        Warranty_Details,
                        Asset_Cost,
                        Vendor_details};
                rowCategory_DetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCategory_DetailsRow);
                return rowCategory_DetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Category_DetailsDataTable cln = ((Category_DetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Category_DetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAsset_Name = base.Columns["Asset Name"];
                this.columnDetails = base.Columns["Details"];
                this.columnAsset_category = base.Columns["Asset category"];
                this.columnAsset_sub_category = base.Columns["Asset sub category"];
                this.columnManufacturer = base.Columns["Manufacturer"];
                this.columnManufacturing_date = base.Columns["Manufacturing date"];
                this.columnWarranty_Details = base.Columns["Warranty Details"];
                this.columnAsset_Cost = base.Columns["Asset Cost"];
                this.columnVendor_details = base.Columns["Vendor details"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAsset_Name = new global::System.Data.DataColumn("Asset Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAsset_Name);
                this.columnDetails = new global::System.Data.DataColumn("Details", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDetails);
                this.columnAsset_category = new global::System.Data.DataColumn("Asset category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAsset_category);
                this.columnAsset_sub_category = new global::System.Data.DataColumn("Asset sub category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAsset_sub_category);
                this.columnManufacturer = new global::System.Data.DataColumn("Manufacturer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturer);
                this.columnManufacturing_date = new global::System.Data.DataColumn("Manufacturing date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturing_date);
                this.columnWarranty_Details = new global::System.Data.DataColumn("Warranty Details", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarranty_Details);
                this.columnAsset_Cost = new global::System.Data.DataColumn("Asset Cost", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAsset_Cost);
                this.columnVendor_details = new global::System.Data.DataColumn("Vendor details", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVendor_details);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Category_DetailsRow NewCategory_DetailsRow() {
                return ((Category_DetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Category_DetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Category_DetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Category_DetailsRowChanged != null)) {
                    this.Category_DetailsRowChanged(this, new Category_DetailsRowChangeEvent(((Category_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Category_DetailsRowChanging != null)) {
                    this.Category_DetailsRowChanging(this, new Category_DetailsRowChangeEvent(((Category_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Category_DetailsRowDeleted != null)) {
                    this.Category_DetailsRowDeleted(this, new Category_DetailsRowChangeEvent(((Category_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Category_DetailsRowDeleting != null)) {
                    this.Category_DetailsRowDeleting(this, new Category_DetailsRowChangeEvent(((Category_DetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCategory_DetailsRow(Category_DetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AssetAssigned ds = new AssetAssigned();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Category_DetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AssetCategorywiseDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnUniqueNumber;
            
            private global::System.Data.DataColumn columnAssetName;
            
            private global::System.Data.DataColumn columnAssetCategory;
            
            private global::System.Data.DataColumn columnAssetSubCategory;
            
            private global::System.Data.DataColumn columnManufacturerName;
            
            private global::System.Data.DataColumn columnManufacturerDate;
            
            private global::System.Data.DataColumn columnWarrantyDate;
            
            private global::System.Data.DataColumn columnAssetCost;
            
            private global::System.Data.DataColumn columnVendorDetails;
            
            private global::System.Data.DataColumn columnBarCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssetCategorywiseDataTable() {
                this.TableName = "AssetCategorywise";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AssetCategorywiseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AssetCategorywiseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UniqueNumberColumn {
                get {
                    return this.columnUniqueNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetNameColumn {
                get {
                    return this.columnAssetName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetCategoryColumn {
                get {
                    return this.columnAssetCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetSubCategoryColumn {
                get {
                    return this.columnAssetSubCategory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManufacturerNameColumn {
                get {
                    return this.columnManufacturerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManufacturerDateColumn {
                get {
                    return this.columnManufacturerDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WarrantyDateColumn {
                get {
                    return this.columnWarrantyDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssetCostColumn {
                get {
                    return this.columnAssetCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VendorDetailsColumn {
                get {
                    return this.columnVendorDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BarCodeColumn {
                get {
                    return this.columnBarCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssetCategorywiseRow this[int index] {
                get {
                    return ((AssetCategorywiseRow)(this.Rows[index]));
                }
            }
            
            public event AssetCategorywiseRowChangeEventHandler AssetCategorywiseRowChanging;
            
            public event AssetCategorywiseRowChangeEventHandler AssetCategorywiseRowChanged;
            
            public event AssetCategorywiseRowChangeEventHandler AssetCategorywiseRowDeleting;
            
            public event AssetCategorywiseRowChangeEventHandler AssetCategorywiseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAssetCategorywiseRow(AssetCategorywiseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssetCategorywiseRow AddAssetCategorywiseRow(string ID, string UniqueNumber, string AssetName, string AssetCategory, string AssetSubCategory, string ManufacturerName, string ManufacturerDate, string WarrantyDate, string AssetCost, string VendorDetails, string BarCode) {
                AssetCategorywiseRow rowAssetCategorywiseRow = ((AssetCategorywiseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        UniqueNumber,
                        AssetName,
                        AssetCategory,
                        AssetSubCategory,
                        ManufacturerName,
                        ManufacturerDate,
                        WarrantyDate,
                        AssetCost,
                        VendorDetails,
                        BarCode};
                rowAssetCategorywiseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAssetCategorywiseRow);
                return rowAssetCategorywiseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AssetCategorywiseDataTable cln = ((AssetCategorywiseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AssetCategorywiseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnUniqueNumber = base.Columns["UniqueNumber"];
                this.columnAssetName = base.Columns["AssetName"];
                this.columnAssetCategory = base.Columns["AssetCategory"];
                this.columnAssetSubCategory = base.Columns["AssetSubCategory"];
                this.columnManufacturerName = base.Columns["ManufacturerName"];
                this.columnManufacturerDate = base.Columns["ManufacturerDate"];
                this.columnWarrantyDate = base.Columns["WarrantyDate"];
                this.columnAssetCost = base.Columns["AssetCost"];
                this.columnVendorDetails = base.Columns["VendorDetails"];
                this.columnBarCode = base.Columns["BarCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnUniqueNumber = new global::System.Data.DataColumn("UniqueNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUniqueNumber);
                this.columnAssetName = new global::System.Data.DataColumn("AssetName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetName);
                this.columnAssetCategory = new global::System.Data.DataColumn("AssetCategory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetCategory);
                this.columnAssetSubCategory = new global::System.Data.DataColumn("AssetSubCategory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetSubCategory);
                this.columnManufacturerName = new global::System.Data.DataColumn("ManufacturerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerName);
                this.columnManufacturerDate = new global::System.Data.DataColumn("ManufacturerDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManufacturerDate);
                this.columnWarrantyDate = new global::System.Data.DataColumn("WarrantyDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWarrantyDate);
                this.columnAssetCost = new global::System.Data.DataColumn("AssetCost", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssetCost);
                this.columnVendorDetails = new global::System.Data.DataColumn("VendorDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVendorDetails);
                this.columnBarCode = new global::System.Data.DataColumn("BarCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBarCode);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssetCategorywiseRow NewAssetCategorywiseRow() {
                return ((AssetCategorywiseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AssetCategorywiseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AssetCategorywiseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AssetCategorywiseRowChanged != null)) {
                    this.AssetCategorywiseRowChanged(this, new AssetCategorywiseRowChangeEvent(((AssetCategorywiseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AssetCategorywiseRowChanging != null)) {
                    this.AssetCategorywiseRowChanging(this, new AssetCategorywiseRowChangeEvent(((AssetCategorywiseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AssetCategorywiseRowDeleted != null)) {
                    this.AssetCategorywiseRowDeleted(this, new AssetCategorywiseRowChangeEvent(((AssetCategorywiseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AssetCategorywiseRowDeleting != null)) {
                    this.AssetCategorywiseRowDeleting(this, new AssetCategorywiseRowChangeEvent(((AssetCategorywiseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAssetCategorywiseRow(AssetCategorywiseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AssetAssigned ds = new AssetAssigned();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AssetCategorywiseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EmployeeDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEmployeeCode;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnMiddleName;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnDOB;
            
            private global::System.Data.DataColumn columnGender;
            
            private global::System.Data.DataColumn columnPersonalEmailID;
            
            private global::System.Data.DataColumn columnCurrentAddress;
            
            private global::System.Data.DataColumn columnPermanentAddress;
            
            private global::System.Data.DataColumn columnResidenceNumber;
            
            private global::System.Data.DataColumn columnEmergencyContactNumber;
            
            private global::System.Data.DataColumn columnMobileNumber;
            
            private global::System.Data.DataColumn columnJoiningDate;
            
            private global::System.Data.DataColumn columnExitDate;
            
            private global::System.Data.DataColumn columnEmailID;
            
            private global::System.Data.DataColumn columnLeavesCount;
            
            private global::System.Data.DataColumn columnManagerName;
            
            private global::System.Data.DataColumn columnHikePer;
            
            private global::System.Data.DataColumn columnSalaryHikeAmount;
            
            private global::System.Data.DataColumn columnCTC;
            
            private global::System.Data.DataColumn columnESOP;
            
            private global::System.Data.DataColumn columnBasic;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnCountryName;
            
            private global::System.Data.DataColumn columnLocationName;
            
            private global::System.Data.DataColumn columnTeamName;
            
            private global::System.Data.DataColumn columnDesignation;
            
            private global::System.Data.DataColumn columnMaritalStatus;
            
            private global::System.Data.DataColumn columnTypeOfExitID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDetailsDataTable() {
                this.TableName = "EmployeeDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EmployeeDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmployeeCodeColumn {
                get {
                    return this.columnEmployeeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MiddleNameColumn {
                get {
                    return this.columnMiddleName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOBColumn {
                get {
                    return this.columnDOB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenderColumn {
                get {
                    return this.columnGender;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PersonalEmailIDColumn {
                get {
                    return this.columnPersonalEmailID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrentAddressColumn {
                get {
                    return this.columnCurrentAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PermanentAddressColumn {
                get {
                    return this.columnPermanentAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ResidenceNumberColumn {
                get {
                    return this.columnResidenceNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmergencyContactNumberColumn {
                get {
                    return this.columnEmergencyContactNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MobileNumberColumn {
                get {
                    return this.columnMobileNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JoiningDateColumn {
                get {
                    return this.columnJoiningDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExitDateColumn {
                get {
                    return this.columnExitDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailIDColumn {
                get {
                    return this.columnEmailID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LeavesCountColumn {
                get {
                    return this.columnLeavesCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManagerNameColumn {
                get {
                    return this.columnManagerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HikePerColumn {
                get {
                    return this.columnHikePer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalaryHikeAmountColumn {
                get {
                    return this.columnSalaryHikeAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CTCColumn {
                get {
                    return this.columnCTC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ESOPColumn {
                get {
                    return this.columnESOP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BasicColumn {
                get {
                    return this.columnBasic;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryNameColumn {
                get {
                    return this.columnCountryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationNameColumn {
                get {
                    return this.columnLocationName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TeamNameColumn {
                get {
                    return this.columnTeamName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DesignationColumn {
                get {
                    return this.columnDesignation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaritalStatusColumn {
                get {
                    return this.columnMaritalStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeOfExitIDColumn {
                get {
                    return this.columnTypeOfExitID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDetailsRow this[int index] {
                get {
                    return ((EmployeeDetailsRow)(this.Rows[index]));
                }
            }
            
            public event EmployeeDetailsRowChangeEventHandler EmployeeDetailsRowChanging;
            
            public event EmployeeDetailsRowChangeEventHandler EmployeeDetailsRowChanged;
            
            public event EmployeeDetailsRowChangeEventHandler EmployeeDetailsRowDeleting;
            
            public event EmployeeDetailsRowChangeEventHandler EmployeeDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEmployeeDetailsRow(EmployeeDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDetailsRow AddEmployeeDetailsRow(
                        string EmployeeCode, 
                        string FirstName, 
                        string MiddleName, 
                        string LastName, 
                        string DOB, 
                        string Gender, 
                        string PersonalEmailID, 
                        string CurrentAddress, 
                        string PermanentAddress, 
                        string ResidenceNumber, 
                        string EmergencyContactNumber, 
                        string MobileNumber, 
                        string JoiningDate, 
                        string ExitDate, 
                        string EmailID, 
                        string LeavesCount, 
                        string ManagerName, 
                        string HikePer, 
                        string SalaryHikeAmount, 
                        string CTC, 
                        string ESOP, 
                        string Basic, 
                        string Name, 
                        string CountryName, 
                        string LocationName, 
                        string TeamName, 
                        string Designation, 
                        string MaritalStatus, 
                        string TypeOfExitID) {
                EmployeeDetailsRow rowEmployeeDetailsRow = ((EmployeeDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EmployeeCode,
                        FirstName,
                        MiddleName,
                        LastName,
                        DOB,
                        Gender,
                        PersonalEmailID,
                        CurrentAddress,
                        PermanentAddress,
                        ResidenceNumber,
                        EmergencyContactNumber,
                        MobileNumber,
                        JoiningDate,
                        ExitDate,
                        EmailID,
                        LeavesCount,
                        ManagerName,
                        HikePer,
                        SalaryHikeAmount,
                        CTC,
                        ESOP,
                        Basic,
                        Name,
                        CountryName,
                        LocationName,
                        TeamName,
                        Designation,
                        MaritalStatus,
                        TypeOfExitID};
                rowEmployeeDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEmployeeDetailsRow);
                return rowEmployeeDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EmployeeDetailsDataTable cln = ((EmployeeDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EmployeeDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEmployeeCode = base.Columns["EmployeeCode"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnMiddleName = base.Columns["MiddleName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnDOB = base.Columns["DOB"];
                this.columnGender = base.Columns["Gender"];
                this.columnPersonalEmailID = base.Columns["PersonalEmailID"];
                this.columnCurrentAddress = base.Columns["CurrentAddress"];
                this.columnPermanentAddress = base.Columns["PermanentAddress"];
                this.columnResidenceNumber = base.Columns["ResidenceNumber"];
                this.columnEmergencyContactNumber = base.Columns["EmergencyContactNumber"];
                this.columnMobileNumber = base.Columns["MobileNumber"];
                this.columnJoiningDate = base.Columns["JoiningDate"];
                this.columnExitDate = base.Columns["ExitDate"];
                this.columnEmailID = base.Columns["EmailID"];
                this.columnLeavesCount = base.Columns["LeavesCount"];
                this.columnManagerName = base.Columns["ManagerName"];
                this.columnHikePer = base.Columns["HikePer"];
                this.columnSalaryHikeAmount = base.Columns["SalaryHikeAmount"];
                this.columnCTC = base.Columns["CTC"];
                this.columnESOP = base.Columns["ESOP"];
                this.columnBasic = base.Columns["Basic"];
                this.columnName = base.Columns["Name"];
                this.columnCountryName = base.Columns["CountryName"];
                this.columnLocationName = base.Columns["LocationName"];
                this.columnTeamName = base.Columns["TeamName"];
                this.columnDesignation = base.Columns["Designation"];
                this.columnMaritalStatus = base.Columns["MaritalStatus"];
                this.columnTypeOfExitID = base.Columns["TypeOfExitID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEmployeeCode = new global::System.Data.DataColumn("EmployeeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmployeeCode);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnMiddleName = new global::System.Data.DataColumn("MiddleName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMiddleName);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnDOB = new global::System.Data.DataColumn("DOB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOB);
                this.columnGender = new global::System.Data.DataColumn("Gender", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGender);
                this.columnPersonalEmailID = new global::System.Data.DataColumn("PersonalEmailID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPersonalEmailID);
                this.columnCurrentAddress = new global::System.Data.DataColumn("CurrentAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrentAddress);
                this.columnPermanentAddress = new global::System.Data.DataColumn("PermanentAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPermanentAddress);
                this.columnResidenceNumber = new global::System.Data.DataColumn("ResidenceNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResidenceNumber);
                this.columnEmergencyContactNumber = new global::System.Data.DataColumn("EmergencyContactNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmergencyContactNumber);
                this.columnMobileNumber = new global::System.Data.DataColumn("MobileNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMobileNumber);
                this.columnJoiningDate = new global::System.Data.DataColumn("JoiningDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJoiningDate);
                this.columnExitDate = new global::System.Data.DataColumn("ExitDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExitDate);
                this.columnEmailID = new global::System.Data.DataColumn("EmailID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmailID);
                this.columnLeavesCount = new global::System.Data.DataColumn("LeavesCount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLeavesCount);
                this.columnManagerName = new global::System.Data.DataColumn("ManagerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManagerName);
                this.columnHikePer = new global::System.Data.DataColumn("HikePer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHikePer);
                this.columnSalaryHikeAmount = new global::System.Data.DataColumn("SalaryHikeAmount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalaryHikeAmount);
                this.columnCTC = new global::System.Data.DataColumn("CTC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCTC);
                this.columnESOP = new global::System.Data.DataColumn("ESOP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnESOP);
                this.columnBasic = new global::System.Data.DataColumn("Basic", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBasic);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnCountryName = new global::System.Data.DataColumn("CountryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryName);
                this.columnLocationName = new global::System.Data.DataColumn("LocationName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationName);
                this.columnTeamName = new global::System.Data.DataColumn("TeamName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTeamName);
                this.columnDesignation = new global::System.Data.DataColumn("Designation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDesignation);
                this.columnMaritalStatus = new global::System.Data.DataColumn("MaritalStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaritalStatus);
                this.columnTypeOfExitID = new global::System.Data.DataColumn("TypeOfExitID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeOfExitID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDetailsRow NewEmployeeDetailsRow() {
                return ((EmployeeDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EmployeeDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EmployeeDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EmployeeDetailsRowChanged != null)) {
                    this.EmployeeDetailsRowChanged(this, new EmployeeDetailsRowChangeEvent(((EmployeeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EmployeeDetailsRowChanging != null)) {
                    this.EmployeeDetailsRowChanging(this, new EmployeeDetailsRowChangeEvent(((EmployeeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EmployeeDetailsRowDeleted != null)) {
                    this.EmployeeDetailsRowDeleted(this, new EmployeeDetailsRowChangeEvent(((EmployeeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EmployeeDetailsRowDeleting != null)) {
                    this.EmployeeDetailsRowDeleting(this, new EmployeeDetailsRowChangeEvent(((EmployeeDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEmployeeDetailsRow(EmployeeDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AssetAssigned ds = new AssetAssigned();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EmployeeDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EducationDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEducation;
            
            private global::System.Data.DataColumn columnStream;
            
            private global::System.Data.DataColumn columnUniversity;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnPercentage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EducationDetailsDataTable() {
                this.TableName = "EducationDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EducationDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EducationDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EducationColumn {
                get {
                    return this.columnEducation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreamColumn {
                get {
                    return this.columnStream;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UniversityColumn {
                get {
                    return this.columnUniversity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentageColumn {
                get {
                    return this.columnPercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EducationDetailsRow this[int index] {
                get {
                    return ((EducationDetailsRow)(this.Rows[index]));
                }
            }
            
            public event EducationDetailsRowChangeEventHandler EducationDetailsRowChanging;
            
            public event EducationDetailsRowChangeEventHandler EducationDetailsRowChanged;
            
            public event EducationDetailsRowChangeEventHandler EducationDetailsRowDeleting;
            
            public event EducationDetailsRowChangeEventHandler EducationDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEducationDetailsRow(EducationDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EducationDetailsRow AddEducationDetailsRow(string Education, string Stream, string University, string Year, string Percentage) {
                EducationDetailsRow rowEducationDetailsRow = ((EducationDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Education,
                        Stream,
                        University,
                        Year,
                        Percentage};
                rowEducationDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEducationDetailsRow);
                return rowEducationDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EducationDetailsDataTable cln = ((EducationDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EducationDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEducation = base.Columns["Education"];
                this.columnStream = base.Columns["Stream"];
                this.columnUniversity = base.Columns["University"];
                this.columnYear = base.Columns["Year"];
                this.columnPercentage = base.Columns["Percentage"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEducation = new global::System.Data.DataColumn("Education", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEducation);
                this.columnStream = new global::System.Data.DataColumn("Stream", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStream);
                this.columnUniversity = new global::System.Data.DataColumn("University", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUniversity);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnPercentage = new global::System.Data.DataColumn("Percentage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentage);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EducationDetailsRow NewEducationDetailsRow() {
                return ((EducationDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EducationDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EducationDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EducationDetailsRowChanged != null)) {
                    this.EducationDetailsRowChanged(this, new EducationDetailsRowChangeEvent(((EducationDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EducationDetailsRowChanging != null)) {
                    this.EducationDetailsRowChanging(this, new EducationDetailsRowChangeEvent(((EducationDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EducationDetailsRowDeleted != null)) {
                    this.EducationDetailsRowDeleted(this, new EducationDetailsRowChangeEvent(((EducationDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EducationDetailsRowDeleting != null)) {
                    this.EducationDetailsRowDeleting(this, new EducationDetailsRowChangeEvent(((EducationDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEducationDetailsRow(EducationDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AssetAssigned ds = new AssetAssigned();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EducationDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CareerSummaryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnIsFresher;
            
            private global::System.Data.DataColumn columnCompanyName;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CareerSummaryDataTable() {
                this.TableName = "CareerSummary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CareerSummaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CareerSummaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsFresherColumn {
                get {
                    return this.columnIsFresher;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CareerSummaryRow this[int index] {
                get {
                    return ((CareerSummaryRow)(this.Rows[index]));
                }
            }
            
            public event CareerSummaryRowChangeEventHandler CareerSummaryRowChanging;
            
            public event CareerSummaryRowChangeEventHandler CareerSummaryRowChanged;
            
            public event CareerSummaryRowChangeEventHandler CareerSummaryRowDeleting;
            
            public event CareerSummaryRowChangeEventHandler CareerSummaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCareerSummaryRow(CareerSummaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CareerSummaryRow AddCareerSummaryRow(string IsFresher, string CompanyName, string StartDate, string EndDate) {
                CareerSummaryRow rowCareerSummaryRow = ((CareerSummaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IsFresher,
                        CompanyName,
                        StartDate,
                        EndDate};
                rowCareerSummaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCareerSummaryRow);
                return rowCareerSummaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CareerSummaryDataTable cln = ((CareerSummaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CareerSummaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIsFresher = base.Columns["IsFresher"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIsFresher = new global::System.Data.DataColumn("IsFresher", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsFresher);
                this.columnCompanyName = new global::System.Data.DataColumn("CompanyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyName);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CareerSummaryRow NewCareerSummaryRow() {
                return ((CareerSummaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CareerSummaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CareerSummaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CareerSummaryRowChanged != null)) {
                    this.CareerSummaryRowChanged(this, new CareerSummaryRowChangeEvent(((CareerSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CareerSummaryRowChanging != null)) {
                    this.CareerSummaryRowChanging(this, new CareerSummaryRowChangeEvent(((CareerSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CareerSummaryRowDeleted != null)) {
                    this.CareerSummaryRowDeleted(this, new CareerSummaryRowChangeEvent(((CareerSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CareerSummaryRowDeleting != null)) {
                    this.CareerSummaryRowDeleting(this, new CareerSummaryRowChangeEvent(((CareerSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCareerSummaryRow(CareerSummaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AssetAssigned ds = new AssetAssigned();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CareerSummaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AllEMPEducationDetailsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEducation;
            
            private global::System.Data.DataColumn columnStream;
            
            private global::System.Data.DataColumn columnUniversity;
            
            private global::System.Data.DataColumn columnYear;
            
            private global::System.Data.DataColumn columnPercentage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllEMPEducationDetailsDataTable() {
                this.TableName = "AllEMPEducationDetails";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AllEMPEducationDetailsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AllEMPEducationDetailsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EducationColumn {
                get {
                    return this.columnEducation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StreamColumn {
                get {
                    return this.columnStream;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UniversityColumn {
                get {
                    return this.columnUniversity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn YearColumn {
                get {
                    return this.columnYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PercentageColumn {
                get {
                    return this.columnPercentage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllEMPEducationDetailsRow this[int index] {
                get {
                    return ((AllEMPEducationDetailsRow)(this.Rows[index]));
                }
            }
            
            public event AllEMPEducationDetailsRowChangeEventHandler AllEMPEducationDetailsRowChanging;
            
            public event AllEMPEducationDetailsRowChangeEventHandler AllEMPEducationDetailsRowChanged;
            
            public event AllEMPEducationDetailsRowChangeEventHandler AllEMPEducationDetailsRowDeleting;
            
            public event AllEMPEducationDetailsRowChangeEventHandler AllEMPEducationDetailsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAllEMPEducationDetailsRow(AllEMPEducationDetailsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllEMPEducationDetailsRow AddAllEMPEducationDetailsRow(string Education, string Stream, string University, string Year, string Percentage) {
                AllEMPEducationDetailsRow rowAllEMPEducationDetailsRow = ((AllEMPEducationDetailsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Education,
                        Stream,
                        University,
                        Year,
                        Percentage};
                rowAllEMPEducationDetailsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAllEMPEducationDetailsRow);
                return rowAllEMPEducationDetailsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AllEMPEducationDetailsDataTable cln = ((AllEMPEducationDetailsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AllEMPEducationDetailsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEducation = base.Columns["Education"];
                this.columnStream = base.Columns["Stream"];
                this.columnUniversity = base.Columns["University"];
                this.columnYear = base.Columns["Year"];
                this.columnPercentage = base.Columns["Percentage"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEducation = new global::System.Data.DataColumn("Education", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEducation);
                this.columnStream = new global::System.Data.DataColumn("Stream", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStream);
                this.columnUniversity = new global::System.Data.DataColumn("University", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUniversity);
                this.columnYear = new global::System.Data.DataColumn("Year", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnYear);
                this.columnPercentage = new global::System.Data.DataColumn("Percentage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPercentage);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllEMPEducationDetailsRow NewAllEMPEducationDetailsRow() {
                return ((AllEMPEducationDetailsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AllEMPEducationDetailsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AllEMPEducationDetailsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AllEMPEducationDetailsRowChanged != null)) {
                    this.AllEMPEducationDetailsRowChanged(this, new AllEMPEducationDetailsRowChangeEvent(((AllEMPEducationDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AllEMPEducationDetailsRowChanging != null)) {
                    this.AllEMPEducationDetailsRowChanging(this, new AllEMPEducationDetailsRowChangeEvent(((AllEMPEducationDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AllEMPEducationDetailsRowDeleted != null)) {
                    this.AllEMPEducationDetailsRowDeleted(this, new AllEMPEducationDetailsRowChangeEvent(((AllEMPEducationDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AllEMPEducationDetailsRowDeleting != null)) {
                    this.AllEMPEducationDetailsRowDeleting(this, new AllEMPEducationDetailsRowChangeEvent(((AllEMPEducationDetailsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAllEMPEducationDetailsRow(AllEMPEducationDetailsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AssetAssigned ds = new AssetAssigned();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AllEMPEducationDetailsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AllEMPCareerSummaryDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnIsFresher;
            
            private global::System.Data.DataColumn columnCompanyName;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnEndDate;
            
            private global::System.Data.DataColumn columnExperienceYear;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllEMPCareerSummaryDataTable() {
                this.TableName = "AllEMPCareerSummary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AllEMPCareerSummaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AllEMPCareerSummaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsFresherColumn {
                get {
                    return this.columnIsFresher;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyNameColumn {
                get {
                    return this.columnCompanyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EndDateColumn {
                get {
                    return this.columnEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExperienceYearColumn {
                get {
                    return this.columnExperienceYear;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllEMPCareerSummaryRow this[int index] {
                get {
                    return ((AllEMPCareerSummaryRow)(this.Rows[index]));
                }
            }
            
            public event AllEMPCareerSummaryRowChangeEventHandler AllEMPCareerSummaryRowChanging;
            
            public event AllEMPCareerSummaryRowChangeEventHandler AllEMPCareerSummaryRowChanged;
            
            public event AllEMPCareerSummaryRowChangeEventHandler AllEMPCareerSummaryRowDeleting;
            
            public event AllEMPCareerSummaryRowChangeEventHandler AllEMPCareerSummaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAllEMPCareerSummaryRow(AllEMPCareerSummaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllEMPCareerSummaryRow AddAllEMPCareerSummaryRow(string IsFresher, string CompanyName, string StartDate, string EndDate, string ExperienceYear) {
                AllEMPCareerSummaryRow rowAllEMPCareerSummaryRow = ((AllEMPCareerSummaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        IsFresher,
                        CompanyName,
                        StartDate,
                        EndDate,
                        ExperienceYear};
                rowAllEMPCareerSummaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAllEMPCareerSummaryRow);
                return rowAllEMPCareerSummaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AllEMPCareerSummaryDataTable cln = ((AllEMPCareerSummaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AllEMPCareerSummaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnIsFresher = base.Columns["IsFresher"];
                this.columnCompanyName = base.Columns["CompanyName"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnEndDate = base.Columns["EndDate"];
                this.columnExperienceYear = base.Columns["ExperienceYear"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnIsFresher = new global::System.Data.DataColumn("IsFresher", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsFresher);
                this.columnCompanyName = new global::System.Data.DataColumn("CompanyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyName);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnEndDate = new global::System.Data.DataColumn("EndDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndDate);
                this.columnExperienceYear = new global::System.Data.DataColumn("ExperienceYear", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExperienceYear);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllEMPCareerSummaryRow NewAllEMPCareerSummaryRow() {
                return ((AllEMPCareerSummaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AllEMPCareerSummaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AllEMPCareerSummaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AllEMPCareerSummaryRowChanged != null)) {
                    this.AllEMPCareerSummaryRowChanged(this, new AllEMPCareerSummaryRowChangeEvent(((AllEMPCareerSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AllEMPCareerSummaryRowChanging != null)) {
                    this.AllEMPCareerSummaryRowChanging(this, new AllEMPCareerSummaryRowChangeEvent(((AllEMPCareerSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AllEMPCareerSummaryRowDeleted != null)) {
                    this.AllEMPCareerSummaryRowDeleted(this, new AllEMPCareerSummaryRowChangeEvent(((AllEMPCareerSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AllEMPCareerSummaryRowDeleting != null)) {
                    this.AllEMPCareerSummaryRowDeleting(this, new AllEMPCareerSummaryRowChangeEvent(((AllEMPCareerSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAllEMPCareerSummaryRow(AllEMPCareerSummaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                AssetAssigned ds = new AssetAssigned();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AllEMPCareerSummaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TeamwiseRow : global::System.Data.DataRow {
            
            private TeamwiseDataTable tableTeamwise;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TeamwiseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTeamwise = ((TeamwiseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TeamName {
                get {
                    try {
                        return ((string)(this[this.tableTeamwise.TeamNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TeamName\' in table \'Teamwise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamwise.TeamNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssetCategory {
                get {
                    try {
                        return ((string)(this[this.tableTeamwise.AssetCategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetCategory\' in table \'Teamwise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamwise.AssetCategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssetSubCategory {
                get {
                    try {
                        return ((string)(this[this.tableTeamwise.AssetSubCategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetSubCategory\' in table \'Teamwise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamwise.AssetSubCategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssetName {
                get {
                    try {
                        return ((string)(this[this.tableTeamwise.AssetNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetName\' in table \'Teamwise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamwise.AssetNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VendorDetails {
                get {
                    try {
                        return ((string)(this[this.tableTeamwise.VendorDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VendorDetails\' in table \'Teamwise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamwise.VendorDetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DateIssued {
                get {
                    try {
                        return ((string)(this[this.tableTeamwise.DateIssuedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateIssued\' in table \'Teamwise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamwise.DateIssuedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DateReturned {
                get {
                    try {
                        return ((string)(this[this.tableTeamwise.DateReturnedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateReturned\' in table \'Teamwise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamwise.DateReturnedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tableTeamwise.LocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Location\' in table \'Teamwise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamwise.LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTeamNameNull() {
                return this.IsNull(this.tableTeamwise.TeamNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTeamNameNull() {
                this[this.tableTeamwise.TeamNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetCategoryNull() {
                return this.IsNull(this.tableTeamwise.AssetCategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetCategoryNull() {
                this[this.tableTeamwise.AssetCategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetSubCategoryNull() {
                return this.IsNull(this.tableTeamwise.AssetSubCategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetSubCategoryNull() {
                this[this.tableTeamwise.AssetSubCategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetNameNull() {
                return this.IsNull(this.tableTeamwise.AssetNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetNameNull() {
                this[this.tableTeamwise.AssetNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVendorDetailsNull() {
                return this.IsNull(this.tableTeamwise.VendorDetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVendorDetailsNull() {
                this[this.tableTeamwise.VendorDetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateIssuedNull() {
                return this.IsNull(this.tableTeamwise.DateIssuedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateIssuedNull() {
                this[this.tableTeamwise.DateIssuedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateReturnedNull() {
                return this.IsNull(this.tableTeamwise.DateReturnedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateReturnedNull() {
                this[this.tableTeamwise.DateReturnedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNull() {
                return this.IsNull(this.tableTeamwise.LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNull() {
                this[this.tableTeamwise.LocationColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UserwiseRow : global::System.Data.DataRow {
            
            private UserwiseDataTable tableUserwise;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserwiseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserwise = ((UserwiseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeName {
                get {
                    try {
                        return ((string)(this[this.tableUserwise.EmployeeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeName\' in table \'Userwise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserwise.EmployeeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssetCategory {
                get {
                    try {
                        return ((string)(this[this.tableUserwise.AssetCategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetCategory\' in table \'Userwise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserwise.AssetCategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssetSubCategory {
                get {
                    try {
                        return ((string)(this[this.tableUserwise.AssetSubCategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetSubCategory\' in table \'Userwise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserwise.AssetSubCategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssetName {
                get {
                    try {
                        return ((string)(this[this.tableUserwise.AssetNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetName\' in table \'Userwise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserwise.AssetNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VendorDetails {
                get {
                    try {
                        return ((string)(this[this.tableUserwise.VendorDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VendorDetails\' in table \'Userwise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserwise.VendorDetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DateIssued {
                get {
                    try {
                        return ((string)(this[this.tableUserwise.DateIssuedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateIssued\' in table \'Userwise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserwise.DateIssuedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DateReturned {
                get {
                    try {
                        return ((string)(this[this.tableUserwise.DateReturnedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateReturned\' in table \'Userwise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserwise.DateReturnedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Location {
                get {
                    try {
                        return ((string)(this[this.tableUserwise.LocationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Location\' in table \'Userwise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserwise.LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeNameNull() {
                return this.IsNull(this.tableUserwise.EmployeeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeNameNull() {
                this[this.tableUserwise.EmployeeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetCategoryNull() {
                return this.IsNull(this.tableUserwise.AssetCategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetCategoryNull() {
                this[this.tableUserwise.AssetCategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetSubCategoryNull() {
                return this.IsNull(this.tableUserwise.AssetSubCategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetSubCategoryNull() {
                this[this.tableUserwise.AssetSubCategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetNameNull() {
                return this.IsNull(this.tableUserwise.AssetNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetNameNull() {
                this[this.tableUserwise.AssetNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVendorDetailsNull() {
                return this.IsNull(this.tableUserwise.VendorDetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVendorDetailsNull() {
                this[this.tableUserwise.VendorDetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateIssuedNull() {
                return this.IsNull(this.tableUserwise.DateIssuedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateIssuedNull() {
                this[this.tableUserwise.DateIssuedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateReturnedNull() {
                return this.IsNull(this.tableUserwise.DateReturnedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateReturnedNull() {
                this[this.tableUserwise.DateReturnedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNull() {
                return this.IsNull(this.tableUserwise.LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNull() {
                this[this.tableUserwise.LocationColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OutgoingAssetsRow : global::System.Data.DataRow {
            
            private OutgoingAssetsDataTable tableOutgoingAssets;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OutgoingAssetsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOutgoingAssets = ((OutgoingAssetsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManufacturerDate {
                get {
                    try {
                        return ((string)(this[this.tableOutgoingAssets.ManufacturerDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManufacturerDate\' in table \'OutgoingAssets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutgoingAssets.ManufacturerDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarrantyDate {
                get {
                    try {
                        return ((string)(this[this.tableOutgoingAssets.WarrantyDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WarrantyDate\' in table \'OutgoingAssets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutgoingAssets.WarrantyDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Reason {
                get {
                    try {
                        return ((string)(this[this.tableOutgoingAssets.ReasonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Reason\' in table \'OutgoingAssets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutgoingAssets.ReasonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssetCategory {
                get {
                    try {
                        return ((string)(this[this.tableOutgoingAssets.AssetCategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetCategory\' in table \'OutgoingAssets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutgoingAssets.AssetCategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssetSubCategory {
                get {
                    try {
                        return ((string)(this[this.tableOutgoingAssets.AssetSubCategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetSubCategory\' in table \'OutgoingAssets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutgoingAssets.AssetSubCategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssetName {
                get {
                    try {
                        return ((string)(this[this.tableOutgoingAssets.AssetNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetName\' in table \'OutgoingAssets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutgoingAssets.AssetNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VendorDetails {
                get {
                    try {
                        return ((string)(this[this.tableOutgoingAssets.VendorDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VendorDetails\' in table \'OutgoingAssets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutgoingAssets.VendorDetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssetCost {
                get {
                    try {
                        return ((string)(this[this.tableOutgoingAssets.AssetCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetCost\' in table \'OutgoingAssets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutgoingAssets.AssetCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReturningDate {
                get {
                    try {
                        return ((string)(this[this.tableOutgoingAssets.ReturningDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReturningDate\' in table \'OutgoingAssets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutgoingAssets.ReturningDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssetNo {
                get {
                    try {
                        return ((string)(this[this.tableOutgoingAssets.AssetNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetNo\' in table \'OutgoingAssets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutgoingAssets.AssetNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManufacturerName {
                get {
                    try {
                        return ((string)(this[this.tableOutgoingAssets.ManufacturerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManufacturerName\' in table \'OutgoingAssets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutgoingAssets.ManufacturerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OutgoingDate {
                get {
                    try {
                        return ((string)(this[this.tableOutgoingAssets.OutgoingDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OutgoingDate\' in table \'OutgoingAssets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOutgoingAssets.OutgoingDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerDateNull() {
                return this.IsNull(this.tableOutgoingAssets.ManufacturerDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerDateNull() {
                this[this.tableOutgoingAssets.ManufacturerDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarrantyDateNull() {
                return this.IsNull(this.tableOutgoingAssets.WarrantyDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarrantyDateNull() {
                this[this.tableOutgoingAssets.WarrantyDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReasonNull() {
                return this.IsNull(this.tableOutgoingAssets.ReasonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReasonNull() {
                this[this.tableOutgoingAssets.ReasonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetCategoryNull() {
                return this.IsNull(this.tableOutgoingAssets.AssetCategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetCategoryNull() {
                this[this.tableOutgoingAssets.AssetCategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetSubCategoryNull() {
                return this.IsNull(this.tableOutgoingAssets.AssetSubCategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetSubCategoryNull() {
                this[this.tableOutgoingAssets.AssetSubCategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetNameNull() {
                return this.IsNull(this.tableOutgoingAssets.AssetNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetNameNull() {
                this[this.tableOutgoingAssets.AssetNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVendorDetailsNull() {
                return this.IsNull(this.tableOutgoingAssets.VendorDetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVendorDetailsNull() {
                this[this.tableOutgoingAssets.VendorDetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetCostNull() {
                return this.IsNull(this.tableOutgoingAssets.AssetCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetCostNull() {
                this[this.tableOutgoingAssets.AssetCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReturningDateNull() {
                return this.IsNull(this.tableOutgoingAssets.ReturningDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReturningDateNull() {
                this[this.tableOutgoingAssets.ReturningDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetNoNull() {
                return this.IsNull(this.tableOutgoingAssets.AssetNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetNoNull() {
                this[this.tableOutgoingAssets.AssetNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerNameNull() {
                return this.IsNull(this.tableOutgoingAssets.ManufacturerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerNameNull() {
                this[this.tableOutgoingAssets.ManufacturerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOutgoingDateNull() {
                return this.IsNull(this.tableOutgoingAssets.OutgoingDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOutgoingDateNull() {
                this[this.tableOutgoingAssets.OutgoingDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExitManagementRow : global::System.Data.DataRow {
            
            private ExitManagementDataTable tableExitManagement;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExitManagementRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExitManagement = ((ExitManagementDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmploymentType {
                get {
                    try {
                        return ((string)(this[this.tableExitManagement.EmploymentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmploymentType\' in table \'ExitManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExitManagement.EmploymentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeCode {
                get {
                    try {
                        return ((string)(this[this.tableExitManagement.EmployeeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeCode\' in table \'ExitManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExitManagement.EmployeeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeName {
                get {
                    try {
                        return ((string)(this[this.tableExitManagement.EmployeeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeName\' in table \'ExitManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExitManagement.EmployeeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Designation {
                get {
                    try {
                        return ((string)(this[this.tableExitManagement.DesignationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Designation\' in table \'ExitManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExitManagement.DesignationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Team {
                get {
                    try {
                        return ((string)(this[this.tableExitManagement.TeamColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Team\' in table \'ExitManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExitManagement.TeamColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManagerName {
                get {
                    try {
                        return ((string)(this[this.tableExitManagement.ManagerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManagerName\' in table \'ExitManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExitManagement.ManagerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JoiningDate {
                get {
                    try {
                        return ((string)(this[this.tableExitManagement.JoiningDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JoiningDate\' in table \'ExitManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExitManagement.JoiningDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExitDate {
                get {
                    try {
                        return ((string)(this[this.tableExitManagement.ExitDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExitDate\' in table \'ExitManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExitManagement.ExitDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TypeOfExit {
                get {
                    try {
                        return ((string)(this[this.tableExitManagement.TypeOfExitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeOfExit\' in table \'ExitManagement\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExitManagement.TypeOfExitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmploymentTypeNull() {
                return this.IsNull(this.tableExitManagement.EmploymentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmploymentTypeNull() {
                this[this.tableExitManagement.EmploymentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeCodeNull() {
                return this.IsNull(this.tableExitManagement.EmployeeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeCodeNull() {
                this[this.tableExitManagement.EmployeeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeNameNull() {
                return this.IsNull(this.tableExitManagement.EmployeeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeNameNull() {
                this[this.tableExitManagement.EmployeeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDesignationNull() {
                return this.IsNull(this.tableExitManagement.DesignationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDesignationNull() {
                this[this.tableExitManagement.DesignationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTeamNull() {
                return this.IsNull(this.tableExitManagement.TeamColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTeamNull() {
                this[this.tableExitManagement.TeamColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManagerNameNull() {
                return this.IsNull(this.tableExitManagement.ManagerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManagerNameNull() {
                this[this.tableExitManagement.ManagerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJoiningDateNull() {
                return this.IsNull(this.tableExitManagement.JoiningDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJoiningDateNull() {
                this[this.tableExitManagement.JoiningDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExitDateNull() {
                return this.IsNull(this.tableExitManagement.ExitDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExitDateNull() {
                this[this.tableExitManagement.ExitDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeOfExitNull() {
                return this.IsNull(this.tableExitManagement.TypeOfExitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeOfExitNull() {
                this[this.tableExitManagement.TypeOfExitColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TeamwiseEmployeeRow : global::System.Data.DataRow {
            
            private TeamwiseEmployeeDataTable tableTeamwiseEmployee;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TeamwiseEmployeeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTeamwiseEmployee = ((TeamwiseEmployeeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeCode {
                get {
                    try {
                        return ((string)(this[this.tableTeamwiseEmployee.EmployeeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeCode\' in table \'TeamwiseEmployee\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamwiseEmployee.EmployeeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeName {
                get {
                    try {
                        return ((string)(this[this.tableTeamwiseEmployee.EmployeeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeName\' in table \'TeamwiseEmployee\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamwiseEmployee.EmployeeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmploymentType {
                get {
                    try {
                        return ((string)(this[this.tableTeamwiseEmployee.EmploymentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmploymentType\' in table \'TeamwiseEmployee\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamwiseEmployee.EmploymentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Designation {
                get {
                    try {
                        return ((string)(this[this.tableTeamwiseEmployee.DesignationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Designation\' in table \'TeamwiseEmployee\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamwiseEmployee.DesignationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JoiningDate {
                get {
                    try {
                        return ((string)(this[this.tableTeamwiseEmployee.JoiningDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JoiningDate\' in table \'TeamwiseEmployee\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamwiseEmployee.JoiningDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManagerName {
                get {
                    try {
                        return ((string)(this[this.tableTeamwiseEmployee.ManagerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManagerName\' in table \'TeamwiseEmployee\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamwiseEmployee.ManagerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TeamName {
                get {
                    try {
                        return ((string)(this[this.tableTeamwiseEmployee.TeamNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TeamName\' in table \'TeamwiseEmployee\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTeamwiseEmployee.TeamNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeCodeNull() {
                return this.IsNull(this.tableTeamwiseEmployee.EmployeeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeCodeNull() {
                this[this.tableTeamwiseEmployee.EmployeeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeNameNull() {
                return this.IsNull(this.tableTeamwiseEmployee.EmployeeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeNameNull() {
                this[this.tableTeamwiseEmployee.EmployeeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmploymentTypeNull() {
                return this.IsNull(this.tableTeamwiseEmployee.EmploymentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmploymentTypeNull() {
                this[this.tableTeamwiseEmployee.EmploymentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDesignationNull() {
                return this.IsNull(this.tableTeamwiseEmployee.DesignationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDesignationNull() {
                this[this.tableTeamwiseEmployee.DesignationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJoiningDateNull() {
                return this.IsNull(this.tableTeamwiseEmployee.JoiningDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJoiningDateNull() {
                this[this.tableTeamwiseEmployee.JoiningDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManagerNameNull() {
                return this.IsNull(this.tableTeamwiseEmployee.ManagerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManagerNameNull() {
                this[this.tableTeamwiseEmployee.ManagerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTeamNameNull() {
                return this.IsNull(this.tableTeamwiseEmployee.TeamNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTeamNameNull() {
                this[this.tableTeamwiseEmployee.TeamNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmployeeJoiningRow : global::System.Data.DataRow {
            
            private EmployeeJoiningDataTable tableEmployeeJoining;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeJoiningRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmployeeJoining = ((EmployeeJoiningDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeCode {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeJoining.EmployeeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeCode\' in table \'EmployeeJoining\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeJoining.EmployeeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeName {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeJoining.EmployeeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeName\' in table \'EmployeeJoining\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeJoining.EmployeeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmploymentType {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeJoining.EmploymentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmploymentType\' in table \'EmployeeJoining\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeJoining.EmploymentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Designation {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeJoining.DesignationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Designation\' in table \'EmployeeJoining\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeJoining.DesignationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TeamName {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeJoining.TeamNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TeamName\' in table \'EmployeeJoining\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeJoining.TeamNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManagerName {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeJoining.ManagerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManagerName\' in table \'EmployeeJoining\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeJoining.ManagerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmpJoiningDate {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeJoining.EmpJoiningDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmpJoiningDate\' in table \'EmployeeJoining\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeJoining.EmpJoiningDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeCodeNull() {
                return this.IsNull(this.tableEmployeeJoining.EmployeeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeCodeNull() {
                this[this.tableEmployeeJoining.EmployeeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeNameNull() {
                return this.IsNull(this.tableEmployeeJoining.EmployeeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeNameNull() {
                this[this.tableEmployeeJoining.EmployeeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmploymentTypeNull() {
                return this.IsNull(this.tableEmployeeJoining.EmploymentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmploymentTypeNull() {
                this[this.tableEmployeeJoining.EmploymentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDesignationNull() {
                return this.IsNull(this.tableEmployeeJoining.DesignationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDesignationNull() {
                this[this.tableEmployeeJoining.DesignationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTeamNameNull() {
                return this.IsNull(this.tableEmployeeJoining.TeamNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTeamNameNull() {
                this[this.tableEmployeeJoining.TeamNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManagerNameNull() {
                return this.IsNull(this.tableEmployeeJoining.ManagerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManagerNameNull() {
                this[this.tableEmployeeJoining.ManagerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmpJoiningDateNull() {
                return this.IsNull(this.tableEmployeeJoining.EmpJoiningDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmpJoiningDateNull() {
                this[this.tableEmployeeJoining.EmpJoiningDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Employee_Type_Row : global::System.Data.DataRow {
            
            private Employee_Type_DataTable tableEmployee_Type_;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Employee_Type_Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmployee_Type_ = ((Employee_Type_DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TeamName {
                get {
                    try {
                        return ((string)(this[this.tableEmployee_Type_.TeamNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TeamName\' in table \'Employee Type \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployee_Type_.TeamNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Manager_Name {
                get {
                    try {
                        return ((string)(this[this.tableEmployee_Type_.Manager_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Manager Name\' in table \'Employee Type \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployee_Type_.Manager_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Employee_Code {
                get {
                    try {
                        return ((string)(this[this.tableEmployee_Type_.Employee_CodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Employee Code\' in table \'Employee Type \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployee_Type_.Employee_CodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Employee_Name {
                get {
                    try {
                        return ((string)(this[this.tableEmployee_Type_.Employee_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Employee Name\' in table \'Employee Type \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployee_Type_.Employee_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Employment_Type {
                get {
                    try {
                        return ((string)(this[this.tableEmployee_Type_.Employment_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Employment Type\' in table \'Employee Type \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployee_Type_.Employment_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Designation {
                get {
                    try {
                        return ((string)(this[this.tableEmployee_Type_.DesignationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Designation\' in table \'Employee Type \' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployee_Type_.DesignationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTeamNameNull() {
                return this.IsNull(this.tableEmployee_Type_.TeamNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTeamNameNull() {
                this[this.tableEmployee_Type_.TeamNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManager_NameNull() {
                return this.IsNull(this.tableEmployee_Type_.Manager_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManager_NameNull() {
                this[this.tableEmployee_Type_.Manager_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployee_CodeNull() {
                return this.IsNull(this.tableEmployee_Type_.Employee_CodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployee_CodeNull() {
                this[this.tableEmployee_Type_.Employee_CodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployee_NameNull() {
                return this.IsNull(this.tableEmployee_Type_.Employee_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployee_NameNull() {
                this[this.tableEmployee_Type_.Employee_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployment_TypeNull() {
                return this.IsNull(this.tableEmployee_Type_.Employment_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployment_TypeNull() {
                this[this.tableEmployee_Type_.Employment_TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDesignationNull() {
                return this.IsNull(this.tableEmployee_Type_.DesignationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDesignationNull() {
                this[this.tableEmployee_Type_.DesignationColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AllEmployeeDetailsRow : global::System.Data.DataRow {
            
            private AllEmployeeDetailsDataTable tableAllEmployeeDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AllEmployeeDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAllEmployeeDetails = ((AllEmployeeDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeCode {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.EmployeeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeCode\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.EmployeeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeName {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.EmployeeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeName\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.EmployeeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationName {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.LocationNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationName\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.LocationNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManagerName {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.ManagerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManagerName\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.ManagerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JoiningDate {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.JoiningDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JoiningDate\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.JoiningDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HikePer {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.HikePerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HikePer\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.HikePerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SalaryHikeAmount {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.SalaryHikeAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SalaryHikeAmount\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.SalaryHikeAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CTC {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.CTCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CTC\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.CTCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ESOP {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.ESOPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ESOP\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.ESOPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOB {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.DOBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOB\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.DOBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Gender {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.GenderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Gender\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.GenderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PersonalEmailID {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.PersonalEmailIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PersonalEmailID\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.PersonalEmailIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Education {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.EducationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Education\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.EducationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Stream {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.StreamColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Stream\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.StreamColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string University {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.UniversityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'University\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.UniversityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Year {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StartDate {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EndDate {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyName {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.CompanyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompanyName\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.CompanyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrentAddress {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.CurrentAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentAddress\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.CurrentAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PermanentAddress {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.PermanentAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermanentAddress\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.PermanentAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ResidenceNumber {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.ResidenceNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ResidenceNumber\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.ResidenceNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmergencyContactNumber {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.EmergencyContactNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmergencyContactNumber\' in table \'AllEmployeeDetails\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.EmergencyContactNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MobileNumber {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.MobileNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MobileNumber\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.MobileNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExitDate {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.ExitDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExitDate\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.ExitDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Designation {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.DesignationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Designation\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.DesignationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeID {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.EmployeeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeID\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.EmployeeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExperienceYear {
                get {
                    try {
                        return ((string)(this[this.tableAllEmployeeDetails.ExperienceYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExperienceYear\' in table \'AllEmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEmployeeDetails.ExperienceYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeCodeNull() {
                return this.IsNull(this.tableAllEmployeeDetails.EmployeeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeCodeNull() {
                this[this.tableAllEmployeeDetails.EmployeeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeNameNull() {
                return this.IsNull(this.tableAllEmployeeDetails.EmployeeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeNameNull() {
                this[this.tableAllEmployeeDetails.EmployeeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNameNull() {
                return this.IsNull(this.tableAllEmployeeDetails.LocationNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNameNull() {
                this[this.tableAllEmployeeDetails.LocationNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManagerNameNull() {
                return this.IsNull(this.tableAllEmployeeDetails.ManagerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManagerNameNull() {
                this[this.tableAllEmployeeDetails.ManagerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJoiningDateNull() {
                return this.IsNull(this.tableAllEmployeeDetails.JoiningDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJoiningDateNull() {
                this[this.tableAllEmployeeDetails.JoiningDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHikePerNull() {
                return this.IsNull(this.tableAllEmployeeDetails.HikePerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHikePerNull() {
                this[this.tableAllEmployeeDetails.HikePerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalaryHikeAmountNull() {
                return this.IsNull(this.tableAllEmployeeDetails.SalaryHikeAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalaryHikeAmountNull() {
                this[this.tableAllEmployeeDetails.SalaryHikeAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCTCNull() {
                return this.IsNull(this.tableAllEmployeeDetails.CTCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCTCNull() {
                this[this.tableAllEmployeeDetails.CTCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsESOPNull() {
                return this.IsNull(this.tableAllEmployeeDetails.ESOPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetESOPNull() {
                this[this.tableAllEmployeeDetails.ESOPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOBNull() {
                return this.IsNull(this.tableAllEmployeeDetails.DOBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOBNull() {
                this[this.tableAllEmployeeDetails.DOBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenderNull() {
                return this.IsNull(this.tableAllEmployeeDetails.GenderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenderNull() {
                this[this.tableAllEmployeeDetails.GenderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPersonalEmailIDNull() {
                return this.IsNull(this.tableAllEmployeeDetails.PersonalEmailIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPersonalEmailIDNull() {
                this[this.tableAllEmployeeDetails.PersonalEmailIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEducationNull() {
                return this.IsNull(this.tableAllEmployeeDetails.EducationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEducationNull() {
                this[this.tableAllEmployeeDetails.EducationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreamNull() {
                return this.IsNull(this.tableAllEmployeeDetails.StreamColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreamNull() {
                this[this.tableAllEmployeeDetails.StreamColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUniversityNull() {
                return this.IsNull(this.tableAllEmployeeDetails.UniversityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUniversityNull() {
                this[this.tableAllEmployeeDetails.UniversityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableAllEmployeeDetails.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableAllEmployeeDetails.YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableAllEmployeeDetails.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableAllEmployeeDetails.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableAllEmployeeDetails.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableAllEmployeeDetails.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyNameNull() {
                return this.IsNull(this.tableAllEmployeeDetails.CompanyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyNameNull() {
                this[this.tableAllEmployeeDetails.CompanyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentAddressNull() {
                return this.IsNull(this.tableAllEmployeeDetails.CurrentAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentAddressNull() {
                this[this.tableAllEmployeeDetails.CurrentAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermanentAddressNull() {
                return this.IsNull(this.tableAllEmployeeDetails.PermanentAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermanentAddressNull() {
                this[this.tableAllEmployeeDetails.PermanentAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResidenceNumberNull() {
                return this.IsNull(this.tableAllEmployeeDetails.ResidenceNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResidenceNumberNull() {
                this[this.tableAllEmployeeDetails.ResidenceNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmergencyContactNumberNull() {
                return this.IsNull(this.tableAllEmployeeDetails.EmergencyContactNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmergencyContactNumberNull() {
                this[this.tableAllEmployeeDetails.EmergencyContactNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMobileNumberNull() {
                return this.IsNull(this.tableAllEmployeeDetails.MobileNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMobileNumberNull() {
                this[this.tableAllEmployeeDetails.MobileNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExitDateNull() {
                return this.IsNull(this.tableAllEmployeeDetails.ExitDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExitDateNull() {
                this[this.tableAllEmployeeDetails.ExitDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDesignationNull() {
                return this.IsNull(this.tableAllEmployeeDetails.DesignationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDesignationNull() {
                this[this.tableAllEmployeeDetails.DesignationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeIDNull() {
                return this.IsNull(this.tableAllEmployeeDetails.EmployeeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeIDNull() {
                this[this.tableAllEmployeeDetails.EmployeeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExperienceYearNull() {
                return this.IsNull(this.tableAllEmployeeDetails.ExperienceYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExperienceYearNull() {
                this[this.tableAllEmployeeDetails.ExperienceYearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Category_DetailsRow : global::System.Data.DataRow {
            
            private Category_DetailsDataTable tableCategory_Details;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Category_DetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCategory_Details = ((Category_DetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Asset_Name {
                get {
                    try {
                        return ((string)(this[this.tableCategory_Details.Asset_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Asset Name\' in table \'Category Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCategory_Details.Asset_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Details {
                get {
                    try {
                        return ((string)(this[this.tableCategory_Details.DetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Details\' in table \'Category Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCategory_Details.DetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Asset_category {
                get {
                    try {
                        return ((string)(this[this.tableCategory_Details.Asset_categoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Asset category\' in table \'Category Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCategory_Details.Asset_categoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Asset_sub_category {
                get {
                    try {
                        return ((string)(this[this.tableCategory_Details.Asset_sub_categoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Asset sub category\' in table \'Category Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCategory_Details.Asset_sub_categoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Manufacturer {
                get {
                    try {
                        return ((string)(this[this.tableCategory_Details.ManufacturerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Manufacturer\' in table \'Category Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCategory_Details.ManufacturerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Manufacturing_date {
                get {
                    try {
                        return ((string)(this[this.tableCategory_Details.Manufacturing_dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Manufacturing date\' in table \'Category Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCategory_Details.Manufacturing_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Warranty_Details {
                get {
                    try {
                        return ((string)(this[this.tableCategory_Details.Warranty_DetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Warranty Details\' in table \'Category Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCategory_Details.Warranty_DetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Asset_Cost {
                get {
                    try {
                        return ((string)(this[this.tableCategory_Details.Asset_CostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Asset Cost\' in table \'Category Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCategory_Details.Asset_CostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Vendor_details {
                get {
                    try {
                        return ((string)(this[this.tableCategory_Details.Vendor_detailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Vendor details\' in table \'Category Details\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCategory_Details.Vendor_detailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAsset_NameNull() {
                return this.IsNull(this.tableCategory_Details.Asset_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAsset_NameNull() {
                this[this.tableCategory_Details.Asset_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDetailsNull() {
                return this.IsNull(this.tableCategory_Details.DetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDetailsNull() {
                this[this.tableCategory_Details.DetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAsset_categoryNull() {
                return this.IsNull(this.tableCategory_Details.Asset_categoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAsset_categoryNull() {
                this[this.tableCategory_Details.Asset_categoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAsset_sub_categoryNull() {
                return this.IsNull(this.tableCategory_Details.Asset_sub_categoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAsset_sub_categoryNull() {
                this[this.tableCategory_Details.Asset_sub_categoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerNull() {
                return this.IsNull(this.tableCategory_Details.ManufacturerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerNull() {
                this[this.tableCategory_Details.ManufacturerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturing_dateNull() {
                return this.IsNull(this.tableCategory_Details.Manufacturing_dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturing_dateNull() {
                this[this.tableCategory_Details.Manufacturing_dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarranty_DetailsNull() {
                return this.IsNull(this.tableCategory_Details.Warranty_DetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarranty_DetailsNull() {
                this[this.tableCategory_Details.Warranty_DetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAsset_CostNull() {
                return this.IsNull(this.tableCategory_Details.Asset_CostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAsset_CostNull() {
                this[this.tableCategory_Details.Asset_CostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVendor_detailsNull() {
                return this.IsNull(this.tableCategory_Details.Vendor_detailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVendor_detailsNull() {
                this[this.tableCategory_Details.Vendor_detailsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AssetCategorywiseRow : global::System.Data.DataRow {
            
            private AssetCategorywiseDataTable tableAssetCategorywise;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AssetCategorywiseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAssetCategorywise = ((AssetCategorywiseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID {
                get {
                    try {
                        return ((string)(this[this.tableAssetCategorywise.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'AssetCategorywise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetCategorywise.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UniqueNumber {
                get {
                    try {
                        return ((string)(this[this.tableAssetCategorywise.UniqueNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UniqueNumber\' in table \'AssetCategorywise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetCategorywise.UniqueNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssetName {
                get {
                    try {
                        return ((string)(this[this.tableAssetCategorywise.AssetNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetName\' in table \'AssetCategorywise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetCategorywise.AssetNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssetCategory {
                get {
                    try {
                        return ((string)(this[this.tableAssetCategorywise.AssetCategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetCategory\' in table \'AssetCategorywise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetCategorywise.AssetCategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssetSubCategory {
                get {
                    try {
                        return ((string)(this[this.tableAssetCategorywise.AssetSubCategoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetSubCategory\' in table \'AssetCategorywise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetCategorywise.AssetSubCategoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManufacturerName {
                get {
                    try {
                        return ((string)(this[this.tableAssetCategorywise.ManufacturerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManufacturerName\' in table \'AssetCategorywise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetCategorywise.ManufacturerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManufacturerDate {
                get {
                    try {
                        return ((string)(this[this.tableAssetCategorywise.ManufacturerDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManufacturerDate\' in table \'AssetCategorywise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetCategorywise.ManufacturerDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WarrantyDate {
                get {
                    try {
                        return ((string)(this[this.tableAssetCategorywise.WarrantyDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WarrantyDate\' in table \'AssetCategorywise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetCategorywise.WarrantyDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssetCost {
                get {
                    try {
                        return ((string)(this[this.tableAssetCategorywise.AssetCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssetCost\' in table \'AssetCategorywise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetCategorywise.AssetCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VendorDetails {
                get {
                    try {
                        return ((string)(this[this.tableAssetCategorywise.VendorDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VendorDetails\' in table \'AssetCategorywise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetCategorywise.VendorDetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BarCode {
                get {
                    try {
                        return ((string)(this[this.tableAssetCategorywise.BarCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BarCode\' in table \'AssetCategorywise\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetCategorywise.BarCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableAssetCategorywise.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableAssetCategorywise.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUniqueNumberNull() {
                return this.IsNull(this.tableAssetCategorywise.UniqueNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUniqueNumberNull() {
                this[this.tableAssetCategorywise.UniqueNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetNameNull() {
                return this.IsNull(this.tableAssetCategorywise.AssetNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetNameNull() {
                this[this.tableAssetCategorywise.AssetNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetCategoryNull() {
                return this.IsNull(this.tableAssetCategorywise.AssetCategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetCategoryNull() {
                this[this.tableAssetCategorywise.AssetCategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetSubCategoryNull() {
                return this.IsNull(this.tableAssetCategorywise.AssetSubCategoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetSubCategoryNull() {
                this[this.tableAssetCategorywise.AssetSubCategoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerNameNull() {
                return this.IsNull(this.tableAssetCategorywise.ManufacturerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerNameNull() {
                this[this.tableAssetCategorywise.ManufacturerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManufacturerDateNull() {
                return this.IsNull(this.tableAssetCategorywise.ManufacturerDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManufacturerDateNull() {
                this[this.tableAssetCategorywise.ManufacturerDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWarrantyDateNull() {
                return this.IsNull(this.tableAssetCategorywise.WarrantyDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWarrantyDateNull() {
                this[this.tableAssetCategorywise.WarrantyDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssetCostNull() {
                return this.IsNull(this.tableAssetCategorywise.AssetCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssetCostNull() {
                this[this.tableAssetCategorywise.AssetCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVendorDetailsNull() {
                return this.IsNull(this.tableAssetCategorywise.VendorDetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVendorDetailsNull() {
                this[this.tableAssetCategorywise.VendorDetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBarCodeNull() {
                return this.IsNull(this.tableAssetCategorywise.BarCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBarCodeNull() {
                this[this.tableAssetCategorywise.BarCodeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EmployeeDetailsRow : global::System.Data.DataRow {
            
            private EmployeeDetailsDataTable tableEmployeeDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EmployeeDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEmployeeDetails = ((EmployeeDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmployeeCode {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.EmployeeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmployeeCode\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.EmployeeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MiddleName {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.MiddleNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MiddleName\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.MiddleNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.LastNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastName\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOB {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.DOBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOB\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.DOBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Gender {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.GenderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Gender\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.GenderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PersonalEmailID {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.PersonalEmailIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PersonalEmailID\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.PersonalEmailIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrentAddress {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.CurrentAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrentAddress\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.CurrentAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PermanentAddress {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.PermanentAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PermanentAddress\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.PermanentAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ResidenceNumber {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.ResidenceNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ResidenceNumber\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.ResidenceNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmergencyContactNumber {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.EmergencyContactNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmergencyContactNumber\' in table \'EmployeeDetails\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.EmergencyContactNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MobileNumber {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.MobileNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MobileNumber\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.MobileNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JoiningDate {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.JoiningDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JoiningDate\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.JoiningDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExitDate {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.ExitDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExitDate\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.ExitDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmailID {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.EmailIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmailID\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.EmailIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LeavesCount {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.LeavesCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LeavesCount\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.LeavesCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ManagerName {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.ManagerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ManagerName\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.ManagerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HikePer {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.HikePerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HikePer\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.HikePerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SalaryHikeAmount {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.SalaryHikeAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SalaryHikeAmount\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.SalaryHikeAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CTC {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.CTCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CTC\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.CTCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ESOP {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.ESOPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ESOP\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.ESOPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Basic {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.BasicColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Basic\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.BasicColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CountryName {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.CountryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountryName\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.CountryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LocationName {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.LocationNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LocationName\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.LocationNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TeamName {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.TeamNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TeamName\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.TeamNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Designation {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.DesignationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Designation\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.DesignationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaritalStatus {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.MaritalStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaritalStatus\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.MaritalStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TypeOfExitID {
                get {
                    try {
                        return ((string)(this[this.tableEmployeeDetails.TypeOfExitIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeOfExitID\' in table \'EmployeeDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEmployeeDetails.TypeOfExitIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmployeeCodeNull() {
                return this.IsNull(this.tableEmployeeDetails.EmployeeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmployeeCodeNull() {
                this[this.tableEmployeeDetails.EmployeeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tableEmployeeDetails.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tableEmployeeDetails.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMiddleNameNull() {
                return this.IsNull(this.tableEmployeeDetails.MiddleNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMiddleNameNull() {
                this[this.tableEmployeeDetails.MiddleNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tableEmployeeDetails.LastNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tableEmployeeDetails.LastNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOBNull() {
                return this.IsNull(this.tableEmployeeDetails.DOBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOBNull() {
                this[this.tableEmployeeDetails.DOBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenderNull() {
                return this.IsNull(this.tableEmployeeDetails.GenderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenderNull() {
                this[this.tableEmployeeDetails.GenderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPersonalEmailIDNull() {
                return this.IsNull(this.tableEmployeeDetails.PersonalEmailIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPersonalEmailIDNull() {
                this[this.tableEmployeeDetails.PersonalEmailIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrentAddressNull() {
                return this.IsNull(this.tableEmployeeDetails.CurrentAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrentAddressNull() {
                this[this.tableEmployeeDetails.CurrentAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPermanentAddressNull() {
                return this.IsNull(this.tableEmployeeDetails.PermanentAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPermanentAddressNull() {
                this[this.tableEmployeeDetails.PermanentAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResidenceNumberNull() {
                return this.IsNull(this.tableEmployeeDetails.ResidenceNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResidenceNumberNull() {
                this[this.tableEmployeeDetails.ResidenceNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmergencyContactNumberNull() {
                return this.IsNull(this.tableEmployeeDetails.EmergencyContactNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmergencyContactNumberNull() {
                this[this.tableEmployeeDetails.EmergencyContactNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMobileNumberNull() {
                return this.IsNull(this.tableEmployeeDetails.MobileNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMobileNumberNull() {
                this[this.tableEmployeeDetails.MobileNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJoiningDateNull() {
                return this.IsNull(this.tableEmployeeDetails.JoiningDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJoiningDateNull() {
                this[this.tableEmployeeDetails.JoiningDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExitDateNull() {
                return this.IsNull(this.tableEmployeeDetails.ExitDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExitDateNull() {
                this[this.tableEmployeeDetails.ExitDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailIDNull() {
                return this.IsNull(this.tableEmployeeDetails.EmailIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailIDNull() {
                this[this.tableEmployeeDetails.EmailIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLeavesCountNull() {
                return this.IsNull(this.tableEmployeeDetails.LeavesCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLeavesCountNull() {
                this[this.tableEmployeeDetails.LeavesCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManagerNameNull() {
                return this.IsNull(this.tableEmployeeDetails.ManagerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManagerNameNull() {
                this[this.tableEmployeeDetails.ManagerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHikePerNull() {
                return this.IsNull(this.tableEmployeeDetails.HikePerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHikePerNull() {
                this[this.tableEmployeeDetails.HikePerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalaryHikeAmountNull() {
                return this.IsNull(this.tableEmployeeDetails.SalaryHikeAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalaryHikeAmountNull() {
                this[this.tableEmployeeDetails.SalaryHikeAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCTCNull() {
                return this.IsNull(this.tableEmployeeDetails.CTCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCTCNull() {
                this[this.tableEmployeeDetails.CTCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsESOPNull() {
                return this.IsNull(this.tableEmployeeDetails.ESOPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetESOPNull() {
                this[this.tableEmployeeDetails.ESOPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBasicNull() {
                return this.IsNull(this.tableEmployeeDetails.BasicColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBasicNull() {
                this[this.tableEmployeeDetails.BasicColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableEmployeeDetails.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableEmployeeDetails.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryNameNull() {
                return this.IsNull(this.tableEmployeeDetails.CountryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryNameNull() {
                this[this.tableEmployeeDetails.CountryNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLocationNameNull() {
                return this.IsNull(this.tableEmployeeDetails.LocationNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLocationNameNull() {
                this[this.tableEmployeeDetails.LocationNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTeamNameNull() {
                return this.IsNull(this.tableEmployeeDetails.TeamNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTeamNameNull() {
                this[this.tableEmployeeDetails.TeamNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDesignationNull() {
                return this.IsNull(this.tableEmployeeDetails.DesignationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDesignationNull() {
                this[this.tableEmployeeDetails.DesignationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaritalStatusNull() {
                return this.IsNull(this.tableEmployeeDetails.MaritalStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaritalStatusNull() {
                this[this.tableEmployeeDetails.MaritalStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeOfExitIDNull() {
                return this.IsNull(this.tableEmployeeDetails.TypeOfExitIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeOfExitIDNull() {
                this[this.tableEmployeeDetails.TypeOfExitIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EducationDetailsRow : global::System.Data.DataRow {
            
            private EducationDetailsDataTable tableEducationDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EducationDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEducationDetails = ((EducationDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Education {
                get {
                    try {
                        return ((string)(this[this.tableEducationDetails.EducationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Education\' in table \'EducationDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEducationDetails.EducationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Stream {
                get {
                    try {
                        return ((string)(this[this.tableEducationDetails.StreamColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Stream\' in table \'EducationDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEducationDetails.StreamColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string University {
                get {
                    try {
                        return ((string)(this[this.tableEducationDetails.UniversityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'University\' in table \'EducationDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEducationDetails.UniversityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Year {
                get {
                    try {
                        return ((string)(this[this.tableEducationDetails.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year\' in table \'EducationDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEducationDetails.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Percentage {
                get {
                    try {
                        return ((string)(this[this.tableEducationDetails.PercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Percentage\' in table \'EducationDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEducationDetails.PercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEducationNull() {
                return this.IsNull(this.tableEducationDetails.EducationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEducationNull() {
                this[this.tableEducationDetails.EducationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreamNull() {
                return this.IsNull(this.tableEducationDetails.StreamColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreamNull() {
                this[this.tableEducationDetails.StreamColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUniversityNull() {
                return this.IsNull(this.tableEducationDetails.UniversityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUniversityNull() {
                this[this.tableEducationDetails.UniversityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableEducationDetails.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableEducationDetails.YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPercentageNull() {
                return this.IsNull(this.tableEducationDetails.PercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPercentageNull() {
                this[this.tableEducationDetails.PercentageColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CareerSummaryRow : global::System.Data.DataRow {
            
            private CareerSummaryDataTable tableCareerSummary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CareerSummaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCareerSummary = ((CareerSummaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsFresher {
                get {
                    try {
                        return ((string)(this[this.tableCareerSummary.IsFresherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsFresher\' in table \'CareerSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCareerSummary.IsFresherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyName {
                get {
                    try {
                        return ((string)(this[this.tableCareerSummary.CompanyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompanyName\' in table \'CareerSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCareerSummary.CompanyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StartDate {
                get {
                    try {
                        return ((string)(this[this.tableCareerSummary.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'CareerSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCareerSummary.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EndDate {
                get {
                    try {
                        return ((string)(this[this.tableCareerSummary.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'CareerSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCareerSummary.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsFresherNull() {
                return this.IsNull(this.tableCareerSummary.IsFresherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsFresherNull() {
                this[this.tableCareerSummary.IsFresherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyNameNull() {
                return this.IsNull(this.tableCareerSummary.CompanyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyNameNull() {
                this[this.tableCareerSummary.CompanyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableCareerSummary.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableCareerSummary.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableCareerSummary.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableCareerSummary.EndDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AllEMPEducationDetailsRow : global::System.Data.DataRow {
            
            private AllEMPEducationDetailsDataTable tableAllEMPEducationDetails;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AllEMPEducationDetailsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAllEMPEducationDetails = ((AllEMPEducationDetailsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Education {
                get {
                    try {
                        return ((string)(this[this.tableAllEMPEducationDetails.EducationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Education\' in table \'AllEMPEducationDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEMPEducationDetails.EducationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Stream {
                get {
                    try {
                        return ((string)(this[this.tableAllEMPEducationDetails.StreamColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Stream\' in table \'AllEMPEducationDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEMPEducationDetails.StreamColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string University {
                get {
                    try {
                        return ((string)(this[this.tableAllEMPEducationDetails.UniversityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'University\' in table \'AllEMPEducationDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEMPEducationDetails.UniversityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Year {
                get {
                    try {
                        return ((string)(this[this.tableAllEMPEducationDetails.YearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Year\' in table \'AllEMPEducationDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEMPEducationDetails.YearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Percentage {
                get {
                    try {
                        return ((string)(this[this.tableAllEMPEducationDetails.PercentageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Percentage\' in table \'AllEMPEducationDetails\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEMPEducationDetails.PercentageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEducationNull() {
                return this.IsNull(this.tableAllEMPEducationDetails.EducationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEducationNull() {
                this[this.tableAllEMPEducationDetails.EducationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStreamNull() {
                return this.IsNull(this.tableAllEMPEducationDetails.StreamColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStreamNull() {
                this[this.tableAllEMPEducationDetails.StreamColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUniversityNull() {
                return this.IsNull(this.tableAllEMPEducationDetails.UniversityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUniversityNull() {
                this[this.tableAllEMPEducationDetails.UniversityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsYearNull() {
                return this.IsNull(this.tableAllEMPEducationDetails.YearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetYearNull() {
                this[this.tableAllEMPEducationDetails.YearColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPercentageNull() {
                return this.IsNull(this.tableAllEMPEducationDetails.PercentageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPercentageNull() {
                this[this.tableAllEMPEducationDetails.PercentageColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AllEMPCareerSummaryRow : global::System.Data.DataRow {
            
            private AllEMPCareerSummaryDataTable tableAllEMPCareerSummary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AllEMPCareerSummaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAllEMPCareerSummary = ((AllEMPCareerSummaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsFresher {
                get {
                    try {
                        return ((string)(this[this.tableAllEMPCareerSummary.IsFresherColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsFresher\' in table \'AllEMPCareerSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEMPCareerSummary.IsFresherColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyName {
                get {
                    try {
                        return ((string)(this[this.tableAllEMPCareerSummary.CompanyNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompanyName\' in table \'AllEMPCareerSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEMPCareerSummary.CompanyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StartDate {
                get {
                    try {
                        return ((string)(this[this.tableAllEMPCareerSummary.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'AllEMPCareerSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEMPCareerSummary.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EndDate {
                get {
                    try {
                        return ((string)(this[this.tableAllEMPCareerSummary.EndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EndDate\' in table \'AllEMPCareerSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEMPCareerSummary.EndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExperienceYear {
                get {
                    try {
                        return ((string)(this[this.tableAllEMPCareerSummary.ExperienceYearColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ExperienceYear\' in table \'AllEMPCareerSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAllEMPCareerSummary.ExperienceYearColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsFresherNull() {
                return this.IsNull(this.tableAllEMPCareerSummary.IsFresherColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsFresherNull() {
                this[this.tableAllEMPCareerSummary.IsFresherColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyNameNull() {
                return this.IsNull(this.tableAllEMPCareerSummary.CompanyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyNameNull() {
                this[this.tableAllEMPCareerSummary.CompanyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableAllEMPCareerSummary.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartDateNull() {
                this[this.tableAllEMPCareerSummary.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEndDateNull() {
                return this.IsNull(this.tableAllEMPCareerSummary.EndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEndDateNull() {
                this[this.tableAllEMPCareerSummary.EndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExperienceYearNull() {
                return this.IsNull(this.tableAllEMPCareerSummary.ExperienceYearColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExperienceYearNull() {
                this[this.tableAllEMPCareerSummary.ExperienceYearColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TeamwiseRowChangeEvent : global::System.EventArgs {
            
            private TeamwiseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TeamwiseRowChangeEvent(TeamwiseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TeamwiseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserwiseRowChangeEvent : global::System.EventArgs {
            
            private UserwiseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserwiseRowChangeEvent(UserwiseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserwiseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OutgoingAssetsRowChangeEvent : global::System.EventArgs {
            
            private OutgoingAssetsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutgoingAssetsRowChangeEvent(OutgoingAssetsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OutgoingAssetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExitManagementRowChangeEvent : global::System.EventArgs {
            
            private ExitManagementRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExitManagementRowChangeEvent(ExitManagementRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExitManagementRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TeamwiseEmployeeRowChangeEvent : global::System.EventArgs {
            
            private TeamwiseEmployeeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TeamwiseEmployeeRowChangeEvent(TeamwiseEmployeeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TeamwiseEmployeeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmployeeJoiningRowChangeEvent : global::System.EventArgs {
            
            private EmployeeJoiningRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeJoiningRowChangeEvent(EmployeeJoiningRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeJoiningRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Employee_Type_RowChangeEvent : global::System.EventArgs {
            
            private Employee_Type_Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Employee_Type_RowChangeEvent(Employee_Type_Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Employee_Type_Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AllEmployeeDetailsRowChangeEvent : global::System.EventArgs {
            
            private AllEmployeeDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllEmployeeDetailsRowChangeEvent(AllEmployeeDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllEmployeeDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Category_DetailsRowChangeEvent : global::System.EventArgs {
            
            private Category_DetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Category_DetailsRowChangeEvent(Category_DetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Category_DetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AssetCategorywiseRowChangeEvent : global::System.EventArgs {
            
            private AssetCategorywiseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssetCategorywiseRowChangeEvent(AssetCategorywiseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssetCategorywiseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EmployeeDetailsRowChangeEvent : global::System.EventArgs {
            
            private EmployeeDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDetailsRowChangeEvent(EmployeeDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EmployeeDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EducationDetailsRowChangeEvent : global::System.EventArgs {
            
            private EducationDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EducationDetailsRowChangeEvent(EducationDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EducationDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CareerSummaryRowChangeEvent : global::System.EventArgs {
            
            private CareerSummaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CareerSummaryRowChangeEvent(CareerSummaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CareerSummaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AllEMPEducationDetailsRowChangeEvent : global::System.EventArgs {
            
            private AllEMPEducationDetailsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllEMPEducationDetailsRowChangeEvent(AllEMPEducationDetailsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllEMPEducationDetailsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AllEMPCareerSummaryRowChangeEvent : global::System.EventArgs {
            
            private AllEMPCareerSummaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllEMPCareerSummaryRowChangeEvent(AllEMPCareerSummaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AllEMPCareerSummaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591